{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-11a2c609cbd02bbd.js","src/index.js","src/js/components/search.js","src/js/services/different-fetchs.js","node_modules/tui-pagination/dist/tui-pagination.js","src/js/components/pagination/pagination.js","src/js/components/pagination/pagination-options.js","src/js/components/search_running_line.js","src/js/services/login.js","node_modules/notiflix/build/notiflix-notify-aio.js","node_modules/@parcel/runtime-js/lib/runtime-0e98ef6595956c23.js","node_modules/@parcel/runtime-js/lib/runtime-6bdb48e512ed4ea8.js","src/templates/backdrop.js","src/js/services/floating-buttons.js","src/js/services/firebase/firebaseDatabase.js","node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","node_modules/@firebase/database/src/core/storage/storage.ts","node_modules/@firebase/database/src/core/util/util.ts","node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","node_modules/@firebase/database/src/core/AuthTokenProvider.ts","node_modules/@firebase/database/src/core/RepoInfo.ts","node_modules/@firebase/database/src/core/stats/StatsCollection.ts","node_modules/@firebase/database/src/core/stats/StatsManager.ts","node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","node_modules/@firebase/database/src/realtime/TransportManager.ts","node_modules/@firebase/database/src/realtime/Connection.ts","node_modules/@firebase/database/src/core/ServerActions.ts","node_modules/@firebase/database/src/core/util/EventEmitter.ts","node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","node_modules/@firebase/database/src/core/util/Path.ts","node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","node_modules/@firebase/database/src/core/PersistentConnection.ts","node_modules/@firebase/database/src/core/snap/Node.ts","node_modules/@firebase/database/src/core/snap/indexes/Index.ts","node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","node_modules/@firebase/database/src/core/util/SortedMap.ts","node_modules/@firebase/database/src/core/snap/comparators.ts","node_modules/@firebase/database/src/core/snap/snap.ts","node_modules/@firebase/database/src/core/snap/LeafNode.ts","node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","node_modules/@firebase/database/src/core/snap/childSet.ts","node_modules/@firebase/database/src/core/snap/IndexMap.ts","node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","node_modules/@firebase/database/src/core/view/Change.ts","node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","node_modules/@firebase/database/src/core/view/QueryParams.ts","node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","node_modules/@firebase/database/src/core/SnapshotHolder.ts","node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","node_modules/@firebase/database/src/core/stats/StatsReporter.ts","node_modules/@firebase/database/src/core/stats/StatsListener.ts","node_modules/@firebase/database/src/core/operation/Operation.ts","node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","node_modules/@firebase/database/src/core/operation/ListenComplete.ts","node_modules/@firebase/database/src/core/operation/Overwrite.ts","node_modules/@firebase/database/src/core/operation/Merge.ts","node_modules/@firebase/database/src/core/view/CacheNode.ts","node_modules/@firebase/database/src/core/view/EventGenerator.ts","node_modules/@firebase/database/src/core/view/ViewCache.ts","node_modules/@firebase/database/src/core/util/ImmutableTree.ts","node_modules/@firebase/database/src/core/CompoundWrite.ts","node_modules/@firebase/database/src/core/WriteTree.ts","node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","node_modules/@firebase/database/src/core/view/ViewProcessor.ts","node_modules/@firebase/database/src/core/view/View.ts","node_modules/@firebase/database/src/core/SyncPoint.ts","node_modules/@firebase/database/src/core/SyncTree.ts","node_modules/@firebase/database/src/core/util/ServerValues.ts","node_modules/@firebase/database/src/core/util/Tree.ts","node_modules/@firebase/database/src/core/util/validation.ts","node_modules/@firebase/database/src/core/view/EventQueue.ts","node_modules/@firebase/database/src/core/Repo.ts","node_modules/@firebase/database/src/core/util/libs/parser.ts","node_modules/@firebase/database/src/core/util/NextPushId.ts","node_modules/@firebase/database/src/core/view/Event.ts","node_modules/@firebase/database/src/core/view/EventRegistration.ts","node_modules/@firebase/database/src/api/OnDisconnect.ts","node_modules/@firebase/database/src/api/Reference_impl.ts","node_modules/@firebase/database/src/api/Database.ts","node_modules/@firebase/database/src/register.ts","node_modules/@firebase/database/src/api/ServerValue.ts","node_modules/@firebase/database/src/api/Transaction.ts","node_modules/@firebase/database/src/api/test_access.ts","node_modules/@firebase/database/src/realtime/Constants.ts"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"EVgbq\\\":\\\"index.f66ac13c.js\\\",\\\"410VS\\\":\\\"icons.e91ba539.svg\\\",\\\"ilVCE\\\":\\\"close.30631600.svg\\\",\\\"5UbS1\\\":\\\"index.776156a6.css\\\",\\\"1sc8W\\\":\\\"library.6a6fc724.js\\\"}\"));","import { STATE } from './js/components/state';\r\nimport './js/components/search';\r\nimport './js/services/swith-buttons';\r\nimport differentFetch from './js/services/different-fetchs';\r\nimport { createCardMarkup, appendCardsMarkup } from './js/services/createCardMarkup';\r\nimport { startPage } from './js/components/pagination/pagination.js';\r\nimport { removeGlobalLoader } from './js/services/loader';\r\nimport { refs, createFilmModal } from './js/services/modal-film';\r\nimport './js/components/team-modal';\r\nimport './js/services/theme';\r\nimport { ticker } from './js/components/search_running_line';\r\nimport './js/services/login';\r\nimport './js/services/islogin';\r\nimport { islogin } from './js/services/islogin';\r\nimport { load } from './js/services/library-storage';\r\nimport { switchBTNs } from './js/services/swith-buttons';\r\nimport './js/services/floating-buttons';\r\nimport { getUserData, writeUserData } from './js/services/firebase/firebaseDatabase';\r\nwindow.addEventListener('load', removeGlobalLoader);\r\nrefs.filmCardListEl.addEventListener('click', createFilmModal);\r\nticker();\r\ngetStateFromLS();\r\ngetUserDataBase();\r\n\r\nget(STATE.page);\r\n\r\nasync function get(page) {\r\n  const date = await differentFetch(page);\r\n  stateModify(date);\r\n  startPage(STATE.totalResults);\r\n  appendCardsMarkup(createCardMarkup(STATE.movies));\r\n}\r\n\r\nfunction stateModify(date) {\r\n  STATE.movies = date.results;\r\n  STATE.totalResults = date.total_results;\r\n}\r\n\r\nfunction getStateFromLS() {\r\n  const lsState = load('STATE');\r\n  STATE.user.uid = lsState?.user?.uid || '';\r\n  switchBTNs(islogin(STATE.user.uid));\r\n}\r\n\r\nasync function getUserDataBase() {\r\n  console.log(STATE.user.uid === '');\r\n  if (STATE.user.uid) {\r\n    await getUserData(STATE.user.uid);\r\n  }\r\n}\r\n\r\nasync;\r\n","import { STATE } from './state';\r\nimport differentFetch from '../services/different-fetchs';\r\n\r\nimport {\r\n  appendCardsMarkup,\r\n  createCardMarkup,\r\n} from '../services/createCardMarkup.js';\r\nconst galleryEl = document.querySelector('.gallery');\r\nconst searchForm = document.querySelector('.blockHome');\r\nconst inputQuere = searchForm[0];\r\n\r\nsearchForm.addEventListener('submit', handlerSearch);\r\n\r\nasync function handlerSearch(e) {\r\n  e.preventDefault();\r\n  try {\r\n    STATE.keyword = inputQuere.value;\r\n    const respons = await differentFetch(STATE.page);\r\n    const flag = respons.results.length;\r\n    console.log('flag: ', flag);\r\n\r\n    if (!flag) {\r\n      toggleNotification(flag);\r\n    } else {\r\n      STATE.movies = respons.results;\r\n      console.log('STATE.movies: ', STATE.movies);\r\n      galleryEl.innerHTML = '';\r\n\r\n      appendCardsMarkup(createCardMarkup(STATE.movies));\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nfunction toggleNotification(flag) {\r\n  const notifyEl = document.querySelector('.notification');\r\n  console.log(flag);\r\n  if (flag) {\r\n    console.log('step1');\r\n\r\n    notifyEl.classList.add('opacityZero');\r\n    return;\r\n  }\r\n  console.log('step2');\r\n  notifyEl.classList.remove('opacityZero');\r\n  setTimeout(() => {\r\n    notifyEl.classList.add('opacityZero');\r\n  }, 5000);\r\n  return;\r\n}\r\n","import moviesAPI from './api';\r\nimport { STATE } from '../components/state';\r\nexport default async function differentFetch(page) {\r\n  if (STATE.keyword) {\r\n    return await moviesAPI.getMovieByKeyword(STATE.keyword, page);\r\n  } else {\r\n    return await moviesAPI.getPopMovies(page);\r\n  }\r\n}\r\n","/*!\n * TOAST UI Pagination\n * @version 3.4.1\n * @author NHN FE Development Team <dl_javascript@nhn.com>\n * @license MIT\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Pagination\"] = factory();\n\telse\n\t\troot[\"tui\"] = root[\"tui\"] || {}, root[\"tui\"][\"Pagination\"] = factory();\n})(window, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"dist\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 10);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Extend the target object from other objects.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\n/**\n * @module object\n */\n\n/**\n * Extend the target object from other objects.\n * @param {object} target - Object that will be extended\n * @param {...object} objects - Objects as sources\n * @returns {object} Extended object\n * @memberof module:object\n */\nfunction extend(target, objects) { // eslint-disable-line no-unused-vars\n  var hasOwnProp = Object.prototype.hasOwnProperty;\n  var source, prop, i, len;\n\n  for (i = 1, len = arguments.length; i < len; i += 1) {\n    source = arguments[i];\n    for (prop in source) {\n      if (hasOwnProp.call(source, prop)) {\n        target[prop] = source[prop];\n      }\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = extend;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Check whether the given variable is undefined or not.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\n/**\n * Check whether the given variable is undefined or not.\n * If the given variable is undefined, returns true.\n * @param {*} obj - Target for checking\n * @returns {boolean} Is undefined?\n * @memberof module:type\n */\nfunction isUndefined(obj) {\n  return obj === undefined; // eslint-disable-line no-undefined\n}\n\nmodule.exports = isUndefined;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Check whether the given variable is an instance of Array or not.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\n/**\n * Check whether the given variable is an instance of Array or not.\n * If the given variable is an instance of Array, return true.\n * @param {*} obj - Target for checking\n * @returns {boolean} Is array instance?\n * @memberof module:type\n */\nfunction isArray(obj) {\n  return obj instanceof Array;\n}\n\nmodule.exports = isArray;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Execute the provided callback once for each property of object(or element of array) which actually exist.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\nvar isArray = __webpack_require__(2);\nvar forEachArray = __webpack_require__(17);\nvar forEachOwnProperties = __webpack_require__(6);\n\n/**\n * @module collection\n */\n\n/**\n * Execute the provided callback once for each property of object(or element of array) which actually exist.\n * If the object is Array-like object(ex-arguments object), It needs to transform to Array.(see 'ex2' of example).\n * If the callback function returns false, the loop will be stopped.\n * Callback function(iteratee) is invoked with three arguments:\n *  1) The value of the property(or The value of the element)\n *  2) The name of the property(or The index of the element)\n *  3) The object being traversed\n * @param {Object} obj The object that will be traversed\n * @param {function} iteratee Callback function\n * @param {Object} [context] Context(this) of callback function\n * @memberof module:collection\n * @example\n * var forEach = require('tui-code-snippet/collection/forEach'); // node, commonjs\n *\n * var sum = 0;\n *\n * forEach([1,2,3], function(value){\n *     sum += value;\n * });\n * alert(sum); // 6\n *\n * // In case of Array-like object\n * var array = Array.prototype.slice.call(arrayLike); // change to array\n * forEach(array, function(value){\n *     sum += value;\n * });\n */\nfunction forEach(obj, iteratee, context) {\n  if (isArray(obj)) {\n    forEachArray(obj, iteratee, context);\n  } else {\n    forEachOwnProperties(obj, iteratee, context);\n  }\n}\n\nmodule.exports = forEach;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Check whether the given variable is a string or not.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\n/**\n * Check whether the given variable is a string or not.\n * If the given variable is a string, return true.\n * @param {*} obj - Target for checking\n * @returns {boolean} Is string?\n * @memberof module:type\n */\nfunction isString(obj) {\n  return typeof obj === 'string' || obj instanceof String;\n}\n\nmodule.exports = isString;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Check whether the given variable is a function or not.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\n/**\n * Check whether the given variable is a function or not.\n * If the given variable is a function, return true.\n * @param {*} obj - Target for checking\n * @returns {boolean} Is function?\n * @memberof module:type\n */\nfunction isFunction(obj) {\n  return obj instanceof Function;\n}\n\nmodule.exports = isFunction;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Execute the provided callback once for each property of object which actually exist.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\n/**\n * Execute the provided callback once for each property of object which actually exist.\n * If the callback function returns false, the loop will be stopped.\n * Callback function(iteratee) is invoked with three arguments:\n *  1) The value of the property\n *  2) The name of the property\n *  3) The object being traversed\n * @param {Object} obj The object that will be traversed\n * @param {function} iteratee  Callback function\n * @param {Object} [context] Context(this) of callback function\n * @memberof module:collection\n * @example\n * var forEachOwnProperties = require('tui-code-snippet/collection/forEachOwnProperties'); // node, commonjs\n *\n * var sum = 0;\n *\n * forEachOwnProperties({a:1,b:2,c:3}, function(value){\n *     sum += value;\n * });\n * alert(sum); // 6\n */\nfunction forEachOwnProperties(obj, iteratee, context) {\n  var key;\n\n  context = context || null;\n\n  for (key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (iteratee.call(context, obj[key], key, obj) === false) {\n        break;\n      }\n    }\n  }\n}\n\nmodule.exports = forEachOwnProperties;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview\n * This module provides a function to make a constructor\n * that can inherit from the other constructors like the CLASS easily.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\nvar inherit = __webpack_require__(18);\nvar extend = __webpack_require__(0);\n\n/**\n * @module defineClass\n */\n\n/**\n * Help a constructor to be defined and to inherit from the other constructors\n * @param {*} [parent] Parent constructor\n * @param {Object} props Members of constructor\n *  @param {Function} props.init Initialization method\n *  @param {Object} [props.static] Static members of constructor\n * @returns {*} Constructor\n * @memberof module:defineClass\n * @example\n * var defineClass = require('tui-code-snippet/defineClass/defineClass'); // node, commonjs\n *\n * //-- #2. Use property --//\n * var Parent = defineClass({\n *     init: function() { // constuructor\n *         this.name = 'made by def';\n *     },\n *     method: function() {\n *         // ...\n *     },\n *     static: {\n *         staticMethod: function() {\n *              // ...\n *         }\n *     }\n * });\n *\n * var Child = defineClass(Parent, {\n *     childMethod: function() {}\n * });\n *\n * Parent.staticMethod();\n *\n * var parentInstance = new Parent();\n * console.log(parentInstance.name); //made by def\n * parentInstance.staticMethod(); // Error\n *\n * var childInstance = new Child();\n * childInstance.method();\n * childInstance.childMethod();\n */\nfunction defineClass(parent, props) {\n  var obj;\n\n  if (!props) {\n    props = parent;\n    parent = null;\n  }\n\n  obj = props.init || function() {};\n\n  if (parent) {\n    inherit(obj, parent);\n  }\n\n  if (props.hasOwnProperty('static')) {\n    extend(obj, props['static']);\n    delete props['static'];\n  }\n\n  extend(obj.prototype, props);\n\n  return obj;\n}\n\nmodule.exports = defineClass;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* eslint-disable complexity */\n/**\n * @fileoverview Returns the first index at which a given element can be found in the array.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\nvar isArray = __webpack_require__(2);\n\n/**\n * @module array\n */\n\n/**\n * Returns the first index at which a given element can be found in the array\n * from start index(default 0), or -1 if it is not present.\n * It compares searchElement to elements of the Array using strict equality\n * (the same method used by the ===, or triple-equals, operator).\n * @param {*} searchElement Element to locate in the array\n * @param {Array} array Array that will be traversed.\n * @param {number} startIndex Start index in array for searching (default 0)\n * @returns {number} the First index at which a given element, or -1 if it is not present\n * @memberof module:array\n * @example\n * var inArray = require('tui-code-snippet/array/inArray'); // node, commonjs\n *\n * var arr = ['one', 'two', 'three', 'four'];\n * var idx1 = inArray('one', arr, 3); // -1\n * var idx2 = inArray('one', arr); // 0\n */\nfunction inArray(searchElement, array, startIndex) {\n  var i;\n  var length;\n  startIndex = startIndex || 0;\n\n  if (!isArray(array)) {\n    return -1;\n  }\n\n  if (Array.prototype.indexOf) {\n    return Array.prototype.indexOf.call(array, searchElement, startIndex);\n  }\n\n  length = array.length;\n  for (i = startIndex; startIndex >= 0 && i < length; i += 1) {\n    if (array[i] === searchElement) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nmodule.exports = inArray;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar template = __webpack_require__(29);\nvar sendHostname = __webpack_require__(30);\nvar isFunction = __webpack_require__(5);\n\nvar util = {\n  /**\n   * Capitalize first letter\n   * @param {string} str - String to change\n   * @returns {string} Changed string\n   */\n  capitalizeFirstLetter: function(str) {\n    return str.substring(0, 1).toUpperCase() + str.substring(1, str.length);\n  },\n\n  /**\n   * Check the element is contained\n   * @param {HTMLElement} find - Target element\n   * @param {HTMLElement} parent - Wrapper element\n   * @returns {boolean} Whether contained or not\n   */\n  isContained: function(find, parent) {\n    if (!parent) {\n      return false;\n    }\n\n    return find === parent ? true : parent.contains(find);\n  },\n\n  /**\n   * Create an new element by template literals.\n   * @param {string|function} tmpl - template\n   * @param {Object} context - context\n   * @returns {HTMLElement}\n   */\n  createElementByTemplate: function(tmpl, context) {\n    var parent = document.createElement('div');\n    var html = isFunction(tmpl) ? tmpl(context) : template(tmpl, context);\n    parent.innerHTML = html;\n\n    return parent.firstChild;\n  },\n\n  /**\n   * Create a new function that, when called, has its this keyword set to the provided value.\n   * @param {function} fn A original function before binding\n   * @param {*} obj context of function in arguments[0]\n   * @returns {function} A new bound function with context that is in arguments[1]\n   */\n  bind: function(fn, obj) {\n    var slice = Array.prototype.slice;\n    var args;\n\n    if (fn.bind) {\n      return fn.bind.apply(fn, slice.call(arguments, 1));\n    }\n\n    args = slice.call(arguments, 2);\n\n    return function() {\n      return fn.apply(obj, args.length ? args.concat(slice.call(arguments)) : arguments);\n    };\n  },\n\n  /**\n   * Send hostname for GA\n   * @ignore\n   */\n  sendHostName: function() {\n    sendHostname('pagination', 'UA-129987462-1');\n  }\n};\n\nmodule.exports = util;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview The entry file of Pagination components\n * @author NHN. FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\n__webpack_require__(11);\n\nmodule.exports = __webpack_require__(12);\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar CustomEvents = __webpack_require__(13);\nvar defineClass = __webpack_require__(7);\nvar extend = __webpack_require__(0);\nvar isUndefined = __webpack_require__(1);\n\nvar View = __webpack_require__(20);\nvar util = __webpack_require__(9);\n\nvar defaultOption = {\n  totalItems: 10,\n  itemsPerPage: 10,\n  visiblePages: 10,\n  page: 1,\n  centerAlign: false,\n  firstItemClassName: 'tui-first-child',\n  lastItemClassName: 'tui-last-child',\n  usageStatistics: true\n};\n\n/**\n * Pagination class\n * @class Pagination\n * @param {string|HTMLElement|jQueryObject} container - Container element or selector.\n * In case of a string, it is considered as an id selector and find the element by id.\n * If there is no element, it is considered as a selector and find the element by querySelector().\n * Passing jQueryObject and considering an id selector at first will be deprecated in v4.0.0.\n * @param {object} options - Option object\n *     @param {number} [options.totalItems=10] Total item count\n *     @param {number} [options.itemsPerPage=10] Item count per page\n *     @param {number} [options.visiblePages=10] Display page link count\n *     @param {number} [options.page=1] Display page after pagination draw.\n *     @param {boolean}[options.centerAlign=false] Whether current page keep center or not\n *     @param {string} [options.firstItemClassName='first-child'] The class name of the first item\n *     @param {string} [options.lastItemClassName='last-child'] The class name of the last item\n *     @param {object} [options.template] A markup string set to make element. Refer to {@link https://github.com/nhn/tui.pagination/blob/master/docs/getting-started.md#how-to-use-template Getting Started: How to use template}.\n *         @param {string|function} [options.template.page] HTML template\n *         @param {string|function} [options.template.currentPage] HTML template\n *         @param {string|function} [options.template.moveButton] HTML template\n *         @param {string|function} [options.template.disabledMoveButton] HTML template\n *         @param {string|function} [options.template.moreButton] HTML template\n *     @param {boolean} [options.usageStatistics=true] Send the hostname to google analytics.\n *         If you do not want to send the hostname, this option set to false.\n * @example\n * // ES6\n * import Pagination from 'tui-pagination';\n *\n * // CommonJS\n * const Pagination = require('tui-pagination');\n *\n * // Browser\n * const Pagination = tui.Pagination;\n *\n * const container = document.getElementById('pagination');\n * const options = { // below default value of options\n *      totalItems: 10,\n *      itemsPerPage: 10,\n *      visiblePages: 10,\n *      page: 1,\n *      centerAlign: false,\n *      firstItemClassName: 'tui-first-child',\n *      lastItemClassName: 'tui-last-child',\n *      template: {\n *          page: '<a href=\"#\" class=\"tui-page-btn\">{{page}}</a>',\n *          currentPage: '<strong class=\"tui-page-btn tui-is-selected\">{{page}}</strong>',\n *          moveButton:\n *              '<a href=\"#\" class=\"tui-page-btn tui-{{type}}\">' +\n *                  '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n *              '</a>',\n *          disabledMoveButton:\n *              '<span class=\"tui-page-btn tui-is-disabled tui-{{type}}\">' +\n *                  '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n *              '</span>',\n *          moreButton:\n *              '<a href=\"#\" class=\"tui-page-btn tui-{{type}}-is-ellip\">' +\n *                  '<span class=\"tui-ico-ellip\">...</span>' +\n *              '</a>'\n *      }\n * };\n * const pagination = new Pagination(container, options);\n */\nvar Pagination = defineClass(\n  /** @lends Pagination.prototype */ {\n    init: function(container, options) {\n      /**\n       * Option object\n       * @type {object}\n       * @private\n       */\n      this._options = extend({}, defaultOption, options);\n\n      /**\n       * Current page number\n       * @type {number}\n       * @private\n       */\n      this._currentPage = 0;\n\n      /**\n       * View instance\n       * @type {View}\n       * @private\n       */\n      this._view = new View(container, this._options, util.bind(this._onClickHandler, this));\n\n      this._paginate();\n\n      if (this._options.usageStatistics) {\n        util.sendHostName();\n      }\n    },\n\n    /**\n     * Set current page\n     * @param {number} page - Current page\n     * @private\n     */\n    _setCurrentPage: function(page) {\n      this._currentPage = page || this._options.page;\n    },\n\n    /**\n     * Get last page number\n     * @returns {number} Last page number\n     * @private\n     */\n    _getLastPage: function() {\n      var lastPage = Math.ceil(this._options.totalItems / this._options.itemsPerPage);\n\n      return !lastPage ? 1 : lastPage;\n    },\n\n    /**\n     * Index of list in total lists\n     * @param {number} pageNumber - Page number\n     * @returns {number} Page index or number\n     * @private\n     */\n    _getPageIndex: function(pageNumber) {\n      var left, pageIndex;\n\n      if (this._options.centerAlign) {\n        left = Math.floor(this._options.visiblePages / 2);\n        pageIndex = pageNumber - left;\n        pageIndex = Math.max(pageIndex, 1);\n        pageIndex = Math.min(pageIndex, this._getLastPage() - this._options.visiblePages + 1);\n\n        return pageIndex;\n      }\n\n      return Math.ceil(pageNumber / this._options.visiblePages);\n    },\n\n    /**\n     * Get relative page\n     * @param {string} moveType - Move type ('prev' or 'next')\n     * @returns {number} Relative page number\n     * @private\n     */\n    _getRelativePage: function(moveType) {\n      var isPrevMove = moveType === 'prev';\n      var currentPage = this.getCurrentPage();\n\n      return isPrevMove ? currentPage - 1 : currentPage + 1;\n    },\n\n    /**\n     * Get more page index\n     * @param {string} moveType - Move type ('prev' or 'next')\n     * @returns {number} Page index\n     * @private\n     */\n    _getMorePageIndex: function(moveType) {\n      var currentPageIndex = this._getPageIndex(this.getCurrentPage());\n      var pageCount = this._options.visiblePages;\n      var isPrevMove = moveType === 'prev';\n      var pageIndex;\n\n      if (this._options.centerAlign) {\n        pageIndex = isPrevMove ? currentPageIndex - 1 : currentPageIndex + pageCount;\n      } else {\n        pageIndex = isPrevMove\n          ? (currentPageIndex - 1) * pageCount\n          : currentPageIndex * pageCount + 1;\n      }\n\n      return pageIndex;\n    },\n    /* eslint-enable complexity */\n\n    /**\n     * Get available page number from over number\n     * If total page is 23, but input number is 30 => return 23\n     * @param {number} page - Page number\n     * @returns {number} Replaced pgae number\n     * @private\n     */\n    _convertToValidPage: function(page) {\n      var lastPageNumber = this._getLastPage();\n      page = Math.max(page, 1);\n      page = Math.min(page, lastPageNumber);\n\n      return page;\n    },\n\n    /**\n     * Create require view set, notify view to update\n     * @param {number} page - Page number\n     * @private\n     */\n    _paginate: function(page) {\n      var viewData = this._makeViewData(page || this._options.page);\n      this._setCurrentPage(page);\n      this._view.update(viewData);\n    },\n\n    /**\n     * Create and get view data\n     * @param {number} page - Page number\n     * @returns {object} view data\n     * @private\n     */\n    _makeViewData: function(page) {\n      var viewData = {};\n      var lastPage = this._getLastPage();\n      var currentPageIndex = this._getPageIndex(page);\n      var lastPageListIndex = this._getPageIndex(lastPage);\n      var edges = this._getEdge(page);\n\n      viewData.leftPageNumber = edges.left;\n      viewData.rightPageNumber = edges.right;\n\n      viewData.prevMore = currentPageIndex > 1;\n      viewData.nextMore = currentPageIndex < lastPageListIndex;\n\n      viewData.page = page;\n      viewData.currentPageIndex = page;\n      viewData.lastPage = lastPage;\n      viewData.lastPageListIndex = lastPage;\n\n      return viewData;\n    },\n\n    /**\n     * Get each edge page\n     * @param {object} page - Page number\n     * @returns {{left: number, right: number}} Edge page numbers\n     * @private\n     */\n    _getEdge: function(page) {\n      var leftPageNumber, rightPageNumber, left;\n      var lastPage = this._getLastPage();\n      var visiblePages = this._options.visiblePages;\n      var currentPageIndex = this._getPageIndex(page);\n\n      if (this._options.centerAlign) {\n        left = Math.floor(visiblePages / 2);\n        leftPageNumber = Math.max(page - left, 1);\n        rightPageNumber = leftPageNumber + visiblePages - 1;\n\n        if (rightPageNumber > lastPage) {\n          leftPageNumber = Math.max(lastPage - visiblePages + 1, 1);\n          rightPageNumber = lastPage;\n        }\n      } else {\n        leftPageNumber = (currentPageIndex - 1) * visiblePages + 1;\n        rightPageNumber = currentPageIndex * visiblePages;\n        rightPageNumber = Math.min(rightPageNumber, lastPage);\n      }\n\n      return {\n        left: leftPageNumber,\n        right: rightPageNumber\n      };\n    },\n\n    /**\n     * Pagelist click event hadnler\n     * @param {?string} buttonType - Button type\n     * @param {?number} page - Page number\n     * @private\n     */\n    /* eslint-disable complexity */\n    _onClickHandler: function(buttonType, page) {\n      switch (buttonType) {\n        case 'first':\n          page = 1;\n          break;\n        case 'prev':\n          page = this._getRelativePage('prev');\n          break;\n        case 'next':\n          page = this._getRelativePage('next');\n          break;\n        case 'prevMore':\n          page = this._getMorePageIndex('prev');\n          break;\n        case 'nextMore':\n          page = this._getMorePageIndex('next');\n          break;\n        case 'last':\n          page = this._getLastPage();\n          break;\n        default:\n          if (!page) {\n            return;\n          }\n      }\n\n      this.movePageTo(page);\n    },\n    /* eslint-enable complexity */\n\n    /**\n     * Reset pagination\n     * @param {*} totalItems - Redraw page item count\n     * @example\n     * pagination.reset();\n     * pagination.reset(100);\n     */\n    reset: function(totalItems) {\n      if (isUndefined(totalItems)) {\n        totalItems = this._options.totalItems;\n      }\n\n      this._options.totalItems = totalItems;\n      this._paginate(1);\n    },\n\n    /**\n     * Move to specific page, redraw list.\n     * Before move fire beforeMove event, After move fire afterMove event.\n     * @param {Number} targetPage - Target page\n     * @example\n     * pagination.movePageTo(10);\n     */\n    movePageTo: function(targetPage) {\n      targetPage = this._convertToValidPage(targetPage);\n\n      /**\n       * @event Pagination#beforeMove\n       * @type {object} evt - Custom event object\n       * @property {number} page - Moved page\n       * @example\n       * paganation.on('beforeMove', (event) => {\n       *     const currentPage = event.page;\n       *\n       *     if (currentPage === 10) {\n       *         return false;\n       *         // return true;\n       *     }\n       * });\n       */\n      if (!this.invoke('beforeMove', { page: targetPage })) {\n        return;\n      }\n\n      this._paginate(targetPage);\n\n      /**\n       * @event Pagination#afterMove\n       * @type {object} evt - Custom event object\n       * @property {number} page - Moved page\n       * @example\n       * paganation.on('afterMove', (event) => {\n       *      const currentPage = event.page;\n       *      console.log(currentPage);\n       * });\n       */\n      this.fire('afterMove', { page: targetPage });\n    },\n\n    /**\n     * Set total count of items\n     * @param {number} itemCount - Total item count\n     */\n    setTotalItems: function(itemCount) {\n      this._options.totalItems = itemCount;\n    },\n\n    /**\n     * Set count of items per page\n     * @param {number} itemCount - Item count\n     */\n    setItemsPerPage: function(itemCount) {\n      this._options.itemsPerPage = itemCount;\n    },\n\n    /**\n     * Get current page\n     * @returns {number} Current page\n     */\n    getCurrentPage: function() {\n      return this._currentPage || this._options.page;\n    }\n  }\n);\n\nCustomEvents.mixin(Pagination);\n\nmodule.exports = Pagination;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview This module provides some functions for custom events. And it is implemented in the observer design pattern.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\nvar extend = __webpack_require__(0);\nvar isExisty = __webpack_require__(14);\nvar isString = __webpack_require__(4);\nvar isObject = __webpack_require__(16);\nvar isArray = __webpack_require__(2);\nvar isFunction = __webpack_require__(5);\nvar forEach = __webpack_require__(3);\n\nvar R_EVENTNAME_SPLIT = /\\s+/g;\n\n/**\n * @class\n * @example\n * // node, commonjs\n * var CustomEvents = require('tui-code-snippet/customEvents/customEvents');\n */\nfunction CustomEvents() {\n  /**\n     * @type {HandlerItem[]}\n     */\n  this.events = null;\n\n  /**\n     * only for checking specific context event was binded\n     * @type {object[]}\n     */\n  this.contexts = null;\n}\n\n/**\n * Mixin custom events feature to specific constructor\n * @param {function} func - constructor\n * @example\n * var CustomEvents = require('tui-code-snippet/customEvents/customEvents'); // node, commonjs\n *\n * var model;\n * function Model() {\n *     this.name = '';\n * }\n * CustomEvents.mixin(Model);\n *\n * model = new Model();\n * model.on('change', function() { this.name = 'model'; }, this);\n * model.fire('change');\n * alert(model.name); // 'model';\n */\nCustomEvents.mixin = function(func) {\n  extend(func.prototype, CustomEvents.prototype);\n};\n\n/**\n * Get HandlerItem object\n * @param {function} handler - handler function\n * @param {object} [context] - context for handler\n * @returns {HandlerItem} HandlerItem object\n * @private\n */\nCustomEvents.prototype._getHandlerItem = function(handler, context) {\n  var item = {handler: handler};\n\n  if (context) {\n    item.context = context;\n  }\n\n  return item;\n};\n\n/**\n * Get event object safely\n * @param {string} [eventName] - create sub event map if not exist.\n * @returns {(object|array)} event object. if you supplied `eventName`\n *  parameter then make new array and return it\n * @private\n */\nCustomEvents.prototype._safeEvent = function(eventName) {\n  var events = this.events;\n  var byName;\n\n  if (!events) {\n    events = this.events = {};\n  }\n\n  if (eventName) {\n    byName = events[eventName];\n\n    if (!byName) {\n      byName = [];\n      events[eventName] = byName;\n    }\n\n    events = byName;\n  }\n\n  return events;\n};\n\n/**\n * Get context array safely\n * @returns {array} context array\n * @private\n */\nCustomEvents.prototype._safeContext = function() {\n  var context = this.contexts;\n\n  if (!context) {\n    context = this.contexts = [];\n  }\n\n  return context;\n};\n\n/**\n * Get index of context\n * @param {object} ctx - context that used for bind custom event\n * @returns {number} index of context\n * @private\n */\nCustomEvents.prototype._indexOfContext = function(ctx) {\n  var context = this._safeContext();\n  var index = 0;\n\n  while (context[index]) {\n    if (ctx === context[index][0]) {\n      return index;\n    }\n\n    index += 1;\n  }\n\n  return -1;\n};\n\n/**\n * Memorize supplied context for recognize supplied object is context or\n *  name: handler pair object when off()\n * @param {object} ctx - context object to memorize\n * @private\n */\nCustomEvents.prototype._memorizeContext = function(ctx) {\n  var context, index;\n\n  if (!isExisty(ctx)) {\n    return;\n  }\n\n  context = this._safeContext();\n  index = this._indexOfContext(ctx);\n\n  if (index > -1) {\n    context[index][1] += 1;\n  } else {\n    context.push([ctx, 1]);\n  }\n};\n\n/**\n * Forget supplied context object\n * @param {object} ctx - context object to forget\n * @private\n */\nCustomEvents.prototype._forgetContext = function(ctx) {\n  var context, contextIndex;\n\n  if (!isExisty(ctx)) {\n    return;\n  }\n\n  context = this._safeContext();\n  contextIndex = this._indexOfContext(ctx);\n\n  if (contextIndex > -1) {\n    context[contextIndex][1] -= 1;\n\n    if (context[contextIndex][1] <= 0) {\n      context.splice(contextIndex, 1);\n    }\n  }\n};\n\n/**\n * Bind event handler\n * @param {(string|{name:string, handler:function})} eventName - custom\n *  event name or an object {eventName: handler}\n * @param {(function|object)} [handler] - handler function or context\n * @param {object} [context] - context for binding\n * @private\n */\nCustomEvents.prototype._bindEvent = function(eventName, handler, context) {\n  var events = this._safeEvent(eventName);\n  this._memorizeContext(context);\n  events.push(this._getHandlerItem(handler, context));\n};\n\n/**\n * Bind event handlers\n * @param {(string|{name:string, handler:function})} eventName - custom\n *  event name or an object {eventName: handler}\n * @param {(function|object)} [handler] - handler function or context\n * @param {object} [context] - context for binding\n * //-- #1. Get Module --//\n * var CustomEvents = require('tui-code-snippet/customEvents/customEvents'); // node, commonjs\n *\n * //-- #2. Use method --//\n * // # 2.1 Basic Usage\n * CustomEvents.on('onload', handler);\n *\n * // # 2.2 With context\n * CustomEvents.on('onload', handler, myObj);\n *\n * // # 2.3 Bind by object that name, handler pairs\n * CustomEvents.on({\n *     'play': handler,\n *     'pause': handler2\n * });\n *\n * // # 2.4 Bind by object that name, handler pairs with context object\n * CustomEvents.on({\n *     'play': handler\n * }, myObj);\n */\nCustomEvents.prototype.on = function(eventName, handler, context) {\n  var self = this;\n\n  if (isString(eventName)) {\n    // [syntax 1, 2]\n    eventName = eventName.split(R_EVENTNAME_SPLIT);\n    forEach(eventName, function(name) {\n      self._bindEvent(name, handler, context);\n    });\n  } else if (isObject(eventName)) {\n    // [syntax 3, 4]\n    context = handler;\n    forEach(eventName, function(func, name) {\n      self.on(name, func, context);\n    });\n  }\n};\n\n/**\n * Bind one-shot event handlers\n * @param {(string|{name:string,handler:function})} eventName - custom\n *  event name or an object {eventName: handler}\n * @param {function|object} [handler] - handler function or context\n * @param {object} [context] - context for binding\n */\nCustomEvents.prototype.once = function(eventName, handler, context) {\n  var self = this;\n\n  if (isObject(eventName)) {\n    context = handler;\n    forEach(eventName, function(func, name) {\n      self.once(name, func, context);\n    });\n\n    return;\n  }\n\n  function onceHandler() { // eslint-disable-line require-jsdoc\n    handler.apply(context, arguments);\n    self.off(eventName, onceHandler, context);\n  }\n\n  this.on(eventName, onceHandler, context);\n};\n\n/**\n * Splice supplied array by callback result\n * @param {array} arr - array to splice\n * @param {function} predicate - function return boolean\n * @private\n */\nCustomEvents.prototype._spliceMatches = function(arr, predicate) {\n  var i = 0;\n  var len;\n\n  if (!isArray(arr)) {\n    return;\n  }\n\n  for (len = arr.length; i < len; i += 1) {\n    if (predicate(arr[i]) === true) {\n      arr.splice(i, 1);\n      len -= 1;\n      i -= 1;\n    }\n  }\n};\n\n/**\n * Get matcher for unbind specific handler events\n * @param {function} handler - handler function\n * @returns {function} handler matcher\n * @private\n */\nCustomEvents.prototype._matchHandler = function(handler) {\n  var self = this;\n\n  return function(item) {\n    var needRemove = handler === item.handler;\n\n    if (needRemove) {\n      self._forgetContext(item.context);\n    }\n\n    return needRemove;\n  };\n};\n\n/**\n * Get matcher for unbind specific context events\n * @param {object} context - context\n * @returns {function} object matcher\n * @private\n */\nCustomEvents.prototype._matchContext = function(context) {\n  var self = this;\n\n  return function(item) {\n    var needRemove = context === item.context;\n\n    if (needRemove) {\n      self._forgetContext(item.context);\n    }\n\n    return needRemove;\n  };\n};\n\n/**\n * Get matcher for unbind specific hander, context pair events\n * @param {function} handler - handler function\n * @param {object} context - context\n * @returns {function} handler, context matcher\n * @private\n */\nCustomEvents.prototype._matchHandlerAndContext = function(handler, context) {\n  var self = this;\n\n  return function(item) {\n    var matchHandler = (handler === item.handler);\n    var matchContext = (context === item.context);\n    var needRemove = (matchHandler && matchContext);\n\n    if (needRemove) {\n      self._forgetContext(item.context);\n    }\n\n    return needRemove;\n  };\n};\n\n/**\n * Unbind event by event name\n * @param {string} eventName - custom event name to unbind\n * @param {function} [handler] - handler function\n * @private\n */\nCustomEvents.prototype._offByEventName = function(eventName, handler) {\n  var self = this;\n  var andByHandler = isFunction(handler);\n  var matchHandler = self._matchHandler(handler);\n\n  eventName = eventName.split(R_EVENTNAME_SPLIT);\n\n  forEach(eventName, function(name) {\n    var handlerItems = self._safeEvent(name);\n\n    if (andByHandler) {\n      self._spliceMatches(handlerItems, matchHandler);\n    } else {\n      forEach(handlerItems, function(item) {\n        self._forgetContext(item.context);\n      });\n\n      self.events[name] = [];\n    }\n  });\n};\n\n/**\n * Unbind event by handler function\n * @param {function} handler - handler function\n * @private\n */\nCustomEvents.prototype._offByHandler = function(handler) {\n  var self = this;\n  var matchHandler = this._matchHandler(handler);\n\n  forEach(this._safeEvent(), function(handlerItems) {\n    self._spliceMatches(handlerItems, matchHandler);\n  });\n};\n\n/**\n * Unbind event by object(name: handler pair object or context object)\n * @param {object} obj - context or {name: handler} pair object\n * @param {function} handler - handler function\n * @private\n */\nCustomEvents.prototype._offByObject = function(obj, handler) {\n  var self = this;\n  var matchFunc;\n\n  if (this._indexOfContext(obj) < 0) {\n    forEach(obj, function(func, name) {\n      self.off(name, func);\n    });\n  } else if (isString(handler)) {\n    matchFunc = this._matchContext(obj);\n\n    self._spliceMatches(this._safeEvent(handler), matchFunc);\n  } else if (isFunction(handler)) {\n    matchFunc = this._matchHandlerAndContext(handler, obj);\n\n    forEach(this._safeEvent(), function(handlerItems) {\n      self._spliceMatches(handlerItems, matchFunc);\n    });\n  } else {\n    matchFunc = this._matchContext(obj);\n\n    forEach(this._safeEvent(), function(handlerItems) {\n      self._spliceMatches(handlerItems, matchFunc);\n    });\n  }\n};\n\n/**\n * Unbind custom events\n * @param {(string|object|function)} eventName - event name or context or\n *  {name: handler} pair object or handler function\n * @param {(function)} handler - handler function\n * @example\n * //-- #1. Get Module --//\n * var CustomEvents = require('tui-code-snippet/customEvents/customEvents'); // node, commonjs\n *\n * //-- #2. Use method --//\n * // # 2.1 off by event name\n * CustomEvents.off('onload');\n *\n * // # 2.2 off by event name and handler\n * CustomEvents.off('play', handler);\n *\n * // # 2.3 off by handler\n * CustomEvents.off(handler);\n *\n * // # 2.4 off by context\n * CustomEvents.off(myObj);\n *\n * // # 2.5 off by context and handler\n * CustomEvents.off(myObj, handler);\n *\n * // # 2.6 off by context and event name\n * CustomEvents.off(myObj, 'onload');\n *\n * // # 2.7 off by an Object.<string, function> that is {eventName: handler}\n * CustomEvents.off({\n *   'play': handler,\n *   'pause': handler2\n * });\n *\n * // # 2.8 off the all events\n * CustomEvents.off();\n */\nCustomEvents.prototype.off = function(eventName, handler) {\n  if (isString(eventName)) {\n    // [syntax 1, 2]\n    this._offByEventName(eventName, handler);\n  } else if (!arguments.length) {\n    // [syntax 8]\n    this.events = {};\n    this.contexts = [];\n  } else if (isFunction(eventName)) {\n    // [syntax 3]\n    this._offByHandler(eventName);\n  } else if (isObject(eventName)) {\n    // [syntax 4, 5, 6]\n    this._offByObject(eventName, handler);\n  }\n};\n\n/**\n * Fire custom event\n * @param {string} eventName - name of custom event\n */\nCustomEvents.prototype.fire = function(eventName) {  // eslint-disable-line\n  this.invoke.apply(this, arguments);\n};\n\n/**\n * Fire a event and returns the result of operation 'boolean AND' with all\n *  listener's results.\n *\n * So, It is different from {@link CustomEvents#fire}.\n *\n * In service code, use this as a before event in component level usually\n *  for notifying that the event is cancelable.\n * @param {string} eventName - Custom event name\n * @param {...*} data - Data for event\n * @returns {boolean} The result of operation 'boolean AND'\n * @example\n * var map = new Map();\n * map.on({\n *     'beforeZoom': function() {\n *         // It should cancel the 'zoom' event by some conditions.\n *         if (that.disabled && this.getState()) {\n *             return false;\n *         }\n *         return true;\n *     }\n * });\n *\n * if (this.invoke('beforeZoom')) {    // check the result of 'beforeZoom'\n *     // if true,\n *     // doSomething\n * }\n */\nCustomEvents.prototype.invoke = function(eventName) {\n  var events, args, index, item;\n\n  if (!this.hasListener(eventName)) {\n    return true;\n  }\n\n  events = this._safeEvent(eventName);\n  args = Array.prototype.slice.call(arguments, 1);\n  index = 0;\n\n  while (events[index]) {\n    item = events[index];\n\n    if (item.handler.apply(item.context, args) === false) {\n      return false;\n    }\n\n    index += 1;\n  }\n\n  return true;\n};\n\n/**\n * Return whether at least one of the handlers is registered in the given\n *  event name.\n * @param {string} eventName - Custom event name\n * @returns {boolean} Is there at least one handler in event name?\n */\nCustomEvents.prototype.hasListener = function(eventName) {\n  return this.getListenerLength(eventName) > 0;\n};\n\n/**\n * Return a count of events registered.\n * @param {string} eventName - Custom event name\n * @returns {number} number of event\n */\nCustomEvents.prototype.getListenerLength = function(eventName) {\n  var events = this._safeEvent(eventName);\n\n  return events.length;\n};\n\nmodule.exports = CustomEvents;\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Check whether the given variable is existing or not.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\nvar isUndefined = __webpack_require__(1);\nvar isNull = __webpack_require__(15);\n\n/**\n * Check whether the given variable is existing or not.\n * If the given variable is not null and not undefined, returns true.\n * @param {*} param - Target for checking\n * @returns {boolean} Is existy?\n * @memberof module:type\n * @example\n * var isExisty = require('tui-code-snippet/type/isExisty'); // node, commonjs\n *\n * isExisty(''); //true\n * isExisty(0); //true\n * isExisty([]); //true\n * isExisty({}); //true\n * isExisty(null); //false\n * isExisty(undefined); //false\n*/\nfunction isExisty(param) {\n  return !isUndefined(param) && !isNull(param);\n}\n\nmodule.exports = isExisty;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Check whether the given variable is null or not.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\n/**\n * Check whether the given variable is null or not.\n * If the given variable(arguments[0]) is null, returns true.\n * @param {*} obj - Target for checking\n * @returns {boolean} Is null?\n * @memberof module:type\n */\nfunction isNull(obj) {\n  return obj === null;\n}\n\nmodule.exports = isNull;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Check whether the given variable is an object or not.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\n/**\n * Check whether the given variable is an object or not.\n * If the given variable is an object, return true.\n * @param {*} obj - Target for checking\n * @returns {boolean} Is object?\n * @memberof module:type\n */\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\nmodule.exports = isObject;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Execute the provided callback once for each element present in the array(or Array-like object) in ascending order.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\n/**\n * Execute the provided callback once for each element present\n * in the array(or Array-like object) in ascending order.\n * If the callback function returns false, the loop will be stopped.\n * Callback function(iteratee) is invoked with three arguments:\n *  1) The value of the element\n *  2) The index of the element\n *  3) The array(or Array-like object) being traversed\n * @param {Array|Arguments|NodeList} arr The array(or Array-like object) that will be traversed\n * @param {function} iteratee Callback function\n * @param {Object} [context] Context(this) of callback function\n * @memberof module:collection\n * @example\n * var forEachArray = require('tui-code-snippet/collection/forEachArray'); // node, commonjs\n *\n * var sum = 0;\n *\n * forEachArray([1,2,3], function(value){\n *     sum += value;\n * });\n * alert(sum); // 6\n */\nfunction forEachArray(arr, iteratee, context) {\n  var index = 0;\n  var len = arr.length;\n\n  context = context || null;\n\n  for (; index < len; index += 1) {\n    if (iteratee.call(context, arr[index], index, arr) === false) {\n      break;\n    }\n  }\n}\n\nmodule.exports = forEachArray;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Provide a simple inheritance in prototype-oriented.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\nvar createObject = __webpack_require__(19);\n\n/**\n * Provide a simple inheritance in prototype-oriented.\n * Caution :\n *  Don't overwrite the prototype of child constructor.\n *\n * @param {function} subType Child constructor\n * @param {function} superType Parent constructor\n * @memberof module:inheritance\n * @example\n * var inherit = require('tui-code-snippet/inheritance/inherit'); // node, commonjs\n *\n * // Parent constructor\n * function Animal(leg) {\n *     this.leg = leg;\n * }\n * Animal.prototype.growl = function() {\n *     // ...\n * };\n *\n * // Child constructor\n * function Person(name) {\n *     this.name = name;\n * }\n *\n * // Inheritance\n * inherit(Person, Animal);\n *\n * // After this inheritance, please use only the extending of property.\n * // Do not overwrite prototype.\n * Person.prototype.walk = function(direction) {\n *     // ...\n * };\n */\nfunction inherit(subType, superType) {\n  var prototype = createObject(superType.prototype);\n  prototype.constructor = subType;\n  subType.prototype = prototype;\n}\n\nmodule.exports = inherit;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Create a new object with the specified prototype object and properties.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\n/**\n * @module inheritance\n */\n\n/**\n * Create a new object with the specified prototype object and properties.\n * @param {Object} obj This object will be a prototype of the newly-created object.\n * @returns {Object}\n * @memberof module:inheritance\n */\nfunction createObject(obj) {\n  function F() {} // eslint-disable-line require-jsdoc\n  F.prototype = obj;\n\n  return new F();\n}\n\nmodule.exports = createObject;\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar forEach = __webpack_require__(3);\nvar defineClass = __webpack_require__(7);\nvar getTarget = __webpack_require__(21);\nvar on = __webpack_require__(22);\nvar preventDefault = __webpack_require__(24);\nvar addClass = __webpack_require__(25);\nvar extend = __webpack_require__(0);\nvar isString = __webpack_require__(4);\nvar isHTMLNode = __webpack_require__(28);\n\nvar util = __webpack_require__(9);\n\nvar defaultTemplate = {\n  page: '<a href=\"#\" class=\"tui-page-btn\">{{page}}</a>',\n  currentPage: '<strong class=\"tui-page-btn tui-is-selected\">{{page}}</strong>',\n  moveButton:\n    '<a href=\"#\" class=\"tui-page-btn tui-{{type}}\">' +\n    '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n    '</a>',\n  disabledMoveButton:\n    '<span class=\"tui-page-btn tui-is-disabled tui-{{type}}\">' +\n    '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n    '</span>',\n  moreButton:\n    '<a href=\"#\" class=\"tui-page-btn tui-{{type}}-is-ellip\">' +\n    '<span class=\"tui-ico-ellip\">...</span>' +\n    '</a>'\n};\nvar moveButtons = ['first', 'prev', 'next', 'last'];\nvar moreButtons = ['prev', 'next'];\n\nvar INVALID_CONTAINER_ELEMENT = 'The container element is invalid.';\n\n/**\n * Pagination view class\n * @class View\n * @param {string|HTMLElement|jQueryObject} container - Container element or id selector\n * @param {object} options - Option object\n *     @param {number} [options.totalItems=10] Total item count\n *     @param {number} [options.itemsPerPage=10] Item count per page\n *     @param {number} [options.visiblePages=10] Display page link count\n *     @param {number} [options.page=1] Display page after pagination draw.\n *     @param {boolean}[options.centerAlign=false] Whether current page keep center or not\n *     @param {string} [options.firstItemClassName='first-child'] The class name of the first item\n *     @param {string} [options.lastItemClassName='last-child'] The class name of the last item\n *     @param {object} [options.template] A markup string set to make element\n *         @param {string|function} [options.template.page] HTML template\n *         @param {string|function} [options.template.currentPage] HTML template\n *         @param {string|function} [options.template.moveButton] HTML template\n *         @param {string|function} [options.template.disabledMoveButton] HTML template\n *         @param {string|function} [options.template.moreButton] HTML template\n * @param {function} handler - Event handler\n * @ignore\n */\nvar View = defineClass(\n  /** @lends View.prototype */ {\n    init: function(container, options, handler) {\n      /**\n       * Root element\n       * @type {HTMLElement}\n       * @private\n       */\n      this._containerElement = null;\n\n      /**\n       * First item's class name\n       * @type {string}\n       * @private\n       */\n      this._firstItemClassName = options.firstItemClassName;\n\n      /**\n       * Last item's class name\n       * @type {string}\n       * @private\n       */\n      this._lastItemClassName = options.lastItemClassName;\n\n      /**\n       * Default template\n       * @type {object.<string, string|function>}\n       * @private\n       */\n      this._template = extend({}, defaultTemplate, options.template);\n\n      /**\n       * Map of buttons\n       * @type {object.<string, HTMLElement>}\n       * @private\n       */\n      this._buttons = {};\n\n      /**\n       * Enabled page elements list\n       * @type {array}\n       * @private\n       */\n\n      this._enabledPageElements = [];\n\n      this._setRootElement(container);\n      this._setMoveButtons();\n      this._setDisabledMoveButtons();\n      this._setMoreButtons();\n      this._attachClickEvent(handler);\n    },\n    /* eslint-enable complexity */\n\n    /**\n     * Set root element\n     * @param {string|HTMLElement|jQueryObject} container - Container element or id selector\n     * @private\n     */\n    _setRootElement: function(container) {\n      if (isString(container)) {\n        container = document.getElementById(container) || document.querySelector(container);\n      } else if (container.jquery) {\n        container = container[0];\n      }\n\n      if (!isHTMLNode(container)) {\n        throw new Error(INVALID_CONTAINER_ELEMENT);\n      }\n\n      this._containerElement = container;\n    },\n\n    /**\n     * Assign move buttons to option\n     * @private\n     */\n    _setMoveButtons: function() {\n      forEach(\n        moveButtons,\n        function(type) {\n          this._buttons[type] = util.createElementByTemplate(this._template.moveButton, {\n            type: type\n          });\n        },\n        this\n      );\n    },\n\n    /**\n     * Assign disabled move buttons to option\n     * @private\n     */\n    _setDisabledMoveButtons: function() {\n      forEach(\n        moveButtons,\n        function(type) {\n          var key = 'disabled' + util.capitalizeFirstLetter(type);\n          this._buttons[key] = util.createElementByTemplate(this._template.disabledMoveButton, {\n            type: type\n          });\n        },\n        this\n      );\n    },\n\n    /**\n     * Assign more buttons to option\n     * @private\n     */\n    _setMoreButtons: function() {\n      forEach(\n        moreButtons,\n        function(type) {\n          var key = type + 'More';\n          this._buttons[key] = util.createElementByTemplate(this._template.moreButton, {\n            type: type\n          });\n        },\n        this\n      );\n    },\n    /* eslint-enable camelcase */\n\n    /**\n     * Get container element\n     * @returns {HTMLElement} Container element\n     * @private\n     */\n    _getContainerElement: function() {\n      return this._containerElement;\n    },\n\n    /**\n     * Append first button on container element\n     * @param {object} viewData - View data to render pagination\n     * @private\n     */\n    _appendFirstButton: function(viewData) {\n      var button;\n\n      if (viewData.page > 1) {\n        button = this._buttons.first;\n      } else {\n        button = this._buttons.disabledFirst;\n      }\n\n      this._getContainerElement().appendChild(button);\n    },\n\n    /**\n     * Append previous button on container element\n     * @param {object} viewData - View data to render pagination\n     * @private\n     */\n    _appendPrevButton: function(viewData) {\n      var button;\n\n      if (viewData.currentPageIndex > 1) {\n        button = this._buttons.prev;\n      } else {\n        button = this._buttons.disabledPrev;\n      }\n\n      this._getContainerElement().appendChild(button);\n    },\n\n    /**\n     * Append next button on container element\n     * @param {object} viewData - View data to render pagination\n     * @private\n     */\n    _appendNextButton: function(viewData) {\n      var button;\n\n      if (viewData.currentPageIndex < viewData.lastPageListIndex) {\n        button = this._buttons.next;\n      } else {\n        button = this._buttons.disabledNext;\n      }\n\n      this._getContainerElement().appendChild(button);\n    },\n\n    /**\n     * Append last button on container element\n     * @param {object} viewData - View data to render pagination\n     * @private\n     */\n    _appendLastButton: function(viewData) {\n      var button;\n\n      if (viewData.page < viewData.lastPage) {\n        button = this._buttons.last;\n      } else {\n        button = this._buttons.disabledLast;\n      }\n\n      this._getContainerElement().appendChild(button);\n    },\n\n    /**\n     * Append previous more button on container element\n     * @param {object} viewData - View data to render pagination\n     * @private\n     */\n    _appendPrevMoreButton: function(viewData) {\n      var button;\n\n      if (viewData.prevMore) {\n        button = this._buttons.prevMore;\n        addClass(button, this._firstItemClassName);\n        this._getContainerElement().appendChild(button);\n      }\n    },\n\n    /**\n     * Append next more button on container element\n     * @param {object} viewData - View data to render pagination\n     * @private\n     */\n    _appendNextMoreButton: function(viewData) {\n      var button;\n\n      if (viewData.nextMore) {\n        button = this._buttons.nextMore;\n        addClass(button, this._lastItemClassName);\n        this._getContainerElement().appendChild(button);\n      }\n    },\n\n    /**\n     * Append page number elements on container element\n     * @param {object} viewData - View data to render pagination\n     * @private\n     */\n    // eslint-disable-next-line complexity\n    _appendPages: function(viewData) {\n      var firstPage = viewData.leftPageNumber;\n      var lastPage = viewData.rightPageNumber;\n      var pageItem, i;\n\n      for (i = firstPage; i <= lastPage; i += 1) {\n        if (i === viewData.page) {\n          pageItem = util.createElementByTemplate(this._template.currentPage, { page: i });\n        } else {\n          pageItem = util.createElementByTemplate(this._template.page, { page: i });\n          this._enabledPageElements.push(pageItem);\n        }\n\n        if (i === firstPage && !viewData.prevMore) {\n          addClass(pageItem, this._firstItemClassName);\n        }\n        if (i === lastPage && !viewData.nextMore) {\n          addClass(pageItem, this._lastItemClassName);\n        }\n        this._getContainerElement().appendChild(pageItem);\n      }\n    },\n\n    /**\n     * Attach click event\n     * @param {function} callback - Callback function\n     * @private\n     */\n    _attachClickEvent: function(callback) {\n      var rootElement = this._getContainerElement();\n\n      on(\n        rootElement,\n        'click',\n        function(ev) {\n          var target = getTarget(ev);\n          var page, buttonType;\n\n          preventDefault(ev);\n\n          buttonType = this._getButtonType(target);\n\n          if (!buttonType) {\n            page = this._getPageNumber(target);\n          }\n\n          callback(buttonType, page);\n        },\n        this\n      );\n    },\n\n    /**\n     * Get button type to move button elements\n     * @param {HTMLElement} targetElement - Each move button element\n     * @returns {?string} Button type\n     * @private\n     */\n    _getButtonType: function(targetElement) {\n      var buttonType;\n      var buttons = this._buttons;\n\n      forEach(\n        buttons,\n        function(button, type) {\n          if (util.isContained(targetElement, button)) {\n            buttonType = type;\n\n            return false;\n          }\n\n          return true;\n        },\n        this\n      );\n\n      return buttonType;\n    },\n    /* eslint-enable no-lonely-if */\n\n    /**\n     * Get number to page elements\n     * @param {HTMLElement} targetElement - Each page element\n     * @returns {?number} Page number\n     * @private\n     */\n    _getPageNumber: function(targetElement) {\n      var targetPage = this._findPageElement(targetElement);\n      var page;\n\n      if (targetPage) {\n        page = parseInt(targetPage.innerText, 10);\n      }\n\n      return page;\n    },\n\n    /**\n     * Find target element from page elements\n     * @param {HTMLElement} targetElement - Each page element\n     * @returns {HTMLElement} Found element\n     * @ignore\n     */\n    _findPageElement: function(targetElement) {\n      var i = 0;\n      var length = this._enabledPageElements.length;\n      var pickedItem;\n\n      for (; i < length; i += 1) {\n        pickedItem = this._enabledPageElements[i];\n\n        if (util.isContained(targetElement, pickedItem)) {\n          return pickedItem;\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Reset container element\n     * @private\n     */\n    _empty: function() {\n      this._enabledPageElements = [];\n\n      forEach(\n        this._buttons,\n        function(buttonElement, type) {\n          this._buttons[type] = buttonElement.cloneNode(true);\n        },\n        this\n      );\n\n      this._getContainerElement().innerHTML = '';\n    },\n\n    /**\n     * Update view\n     * @param {object} viewData - View data to render pagination\n     * @ignore\n     */\n    update: function(viewData) {\n      this._empty();\n      this._appendFirstButton(viewData);\n      this._appendPrevButton(viewData);\n      this._appendPrevMoreButton(viewData);\n      this._appendPages(viewData);\n      this._appendNextMoreButton(viewData);\n      this._appendNextButton(viewData);\n      this._appendLastButton(viewData);\n    }\n  }\n);\n\nmodule.exports = View;\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Get a target element from an event object.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\n/**\n * Get a target element from an event object.\n * @param {Event} e - event object\n * @returns {HTMLElement} - target element\n * @memberof module:domEvent\n */\nfunction getTarget(e) {\n  return e.target || e.srcElement;\n}\n\nmodule.exports = getTarget;\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Bind DOM events\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\nvar isString = __webpack_require__(4);\nvar forEach = __webpack_require__(3);\n\nvar safeEvent = __webpack_require__(23);\n\n/**\n * Bind DOM events.\n * @param {HTMLElement} element - element to bind events\n * @param {(string|object)} types - Space splitted events names or eventName:handler object\n * @param {(function|object)} handler - handler function or context for handler method\n * @param {object} [context] context - context for handler method.\n * @memberof module:domEvent\n * @example\n * var div = document.querySelector('div');\n * \n * // Bind one event to an element.\n * on(div, 'click', toggle);\n * \n * // Bind multiple events with a same handler to multiple elements at once.\n * // Use event names splitted by a space.\n * on(div, 'mouseenter mouseleave', changeColor);\n * \n * // Bind multiple events with different handlers to an element at once.\n * // Use an object which of key is an event name and value is a handler function.\n * on(div, {\n *   keydown: highlight,\n *   keyup: dehighlight\n * });\n * \n * // Set a context for handler method.\n * var name = 'global';\n * var repository = {name: 'CodeSnippet'};\n * on(div, 'drag', function() {\n *  console.log(this.name);\n * }, repository);\n * // Result when you drag a div: \"CodeSnippet\"\n */\nfunction on(element, types, handler, context) {\n  if (isString(types)) {\n    forEach(types.split(/\\s+/g), function(type) {\n      bindEvent(element, type, handler, context);\n    });\n\n    return;\n  }\n\n  forEach(types, function(func, type) {\n    bindEvent(element, type, func, handler);\n  });\n}\n\n/**\n * Bind DOM events\n * @param {HTMLElement} element - element to bind events\n * @param {string} type - events name\n * @param {function} handler - handler function or context for handler method\n * @param {object} [context] context - context for handler method.\n * @private\n */\nfunction bindEvent(element, type, handler, context) {\n  /**\n     * Event handler\n     * @param {Event} e - event object\n     */\n  function eventHandler(e) {\n    handler.call(context || element, e || window.event);\n  }\n\n  if ('addEventListener' in element) {\n    element.addEventListener(type, eventHandler);\n  } else if ('attachEvent' in element) {\n    element.attachEvent('on' + type, eventHandler);\n  }\n  memorizeHandler(element, type, handler, eventHandler);\n}\n\n/**\n * Memorize DOM event handler for unbinding.\n * @param {HTMLElement} element - element to bind events\n * @param {string} type - events name\n * @param {function} handler - handler function that user passed at on() use\n * @param {function} wrappedHandler - handler function that wrapped by domevent for implementing some features\n * @private\n */\nfunction memorizeHandler(element, type, handler, wrappedHandler) {\n  var events = safeEvent(element, type);\n  var existInEvents = false;\n\n  forEach(events, function(obj) {\n    if (obj.handler === handler) {\n      existInEvents = true;\n\n      return false;\n    }\n\n    return true;\n  });\n\n  if (!existInEvents) {\n    events.push({\n      handler: handler,\n      wrappedHandler: wrappedHandler\n    });\n  }\n}\n\nmodule.exports = on;\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Get event collection for specific HTML element\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\nvar EVENT_KEY = '_feEventKey';\n\n/**\n * Get event collection for specific HTML element\n * @param {HTMLElement} element - HTML element\n * @param {string} type - event type\n * @returns {array}\n * @private\n */\nfunction safeEvent(element, type) {\n  var events = element[EVENT_KEY];\n  var handlers;\n\n  if (!events) {\n    events = element[EVENT_KEY] = {};\n  }\n\n  handlers = events[type];\n  if (!handlers) {\n    handlers = events[type] = [];\n  }\n\n  return handlers;\n}\n\nmodule.exports = safeEvent;\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Prevent default action\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\n/**\n * Prevent default action\n * @param {Event} e - event object\n * @memberof module:domEvent\n */\nfunction preventDefault(e) {\n  if (e.preventDefault) {\n    e.preventDefault();\n\n    return;\n  }\n\n  e.returnValue = false;\n}\n\nmodule.exports = preventDefault;\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Add css class to element\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\nvar forEach = __webpack_require__(3);\nvar inArray = __webpack_require__(8);\nvar getClass = __webpack_require__(26);\nvar setClassName = __webpack_require__(27);\n\n/**\n * domUtil module\n * @module domUtil\n */\n\n/**\n * Add css class to element\n * @param {(HTMLElement|SVGElement)} element - target element\n * @param {...string} cssClass - css classes to add\n * @memberof module:domUtil\n */\nfunction addClass(element) {\n  var cssClass = Array.prototype.slice.call(arguments, 1);\n  var classList = element.classList;\n  var newClass = [];\n  var origin;\n\n  if (classList) {\n    forEach(cssClass, function(name) {\n      element.classList.add(name);\n    });\n\n    return;\n  }\n\n  origin = getClass(element);\n\n  if (origin) {\n    cssClass = [].concat(origin.split(/\\s+/), cssClass);\n  }\n\n  forEach(cssClass, function(cls) {\n    if (inArray(cls, newClass) < 0) {\n      newClass.push(cls);\n    }\n  });\n\n  setClassName(element, newClass);\n}\n\nmodule.exports = addClass;\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Get HTML element's design classes.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\nvar isUndefined = __webpack_require__(1);\n\n/**\n * Get HTML element's design classes.\n * @param {(HTMLElement|SVGElement)} element target element\n * @returns {string} element css class name\n * @memberof module:domUtil\n */\nfunction getClass(element) {\n  if (!element || !element.className) {\n    return '';\n  }\n\n  if (isUndefined(element.className.baseVal)) {\n    return element.className;\n  }\n\n  return element.className.baseVal;\n}\n\nmodule.exports = getClass;\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Set className value\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\nvar isArray = __webpack_require__(2);\nvar isUndefined = __webpack_require__(1);\n\n/**\n * Set className value\n * @param {(HTMLElement|SVGElement)} element - target element\n * @param {(string|string[])} cssClass - class names\n * @private\n */\nfunction setClassName(element, cssClass) {\n  cssClass = isArray(cssClass) ? cssClass.join(' ') : cssClass;\n\n  cssClass = cssClass.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n  if (isUndefined(element.className.baseVal)) {\n    element.className = cssClass;\n\n    return;\n  }\n\n  element.className.baseVal = cssClass;\n}\n\nmodule.exports = setClassName;\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Check whether the given variable is a instance of HTMLNode or not.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\n/**\n * Check whether the given variable is a instance of HTMLNode or not.\n * If the given variables is a instance of HTMLNode, return true.\n * @param {*} html - Target for checking\n * @returns {boolean} Is HTMLNode ?\n * @memberof module:type\n */\nfunction isHTMLNode(html) {\n  if (typeof HTMLElement === 'object') {\n    return (html && (html instanceof HTMLElement || !!html.nodeType));\n  }\n\n  return !!(html && html.nodeType);\n}\n\nmodule.exports = isHTMLNode;\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Convert text by binding expressions with context.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\nvar inArray = __webpack_require__(8);\nvar forEach = __webpack_require__(3);\nvar isArray = __webpack_require__(2);\nvar isString = __webpack_require__(4);\nvar extend = __webpack_require__(0);\n\n// IE8 does not support capture groups.\nvar EXPRESSION_REGEXP = /{{\\s?|\\s?}}/g;\nvar BRACKET_NOTATION_REGEXP = /^[a-zA-Z0-9_@]+\\[[a-zA-Z0-9_@\"']+\\]$/;\nvar BRACKET_REGEXP = /\\[\\s?|\\s?\\]/;\nvar DOT_NOTATION_REGEXP = /^[a-zA-Z_]+\\.[a-zA-Z_]+$/;\nvar DOT_REGEXP = /\\./;\nvar STRING_NOTATION_REGEXP = /^[\"']\\w+[\"']$/;\nvar STRING_REGEXP = /\"|'/g;\nvar NUMBER_REGEXP = /^-?\\d+\\.?\\d*$/;\n\nvar EXPRESSION_INTERVAL = 2;\n\nvar BLOCK_HELPERS = {\n  'if': handleIf,\n  'each': handleEach,\n  'with': handleWith\n};\n\nvar isValidSplit = 'a'.split(/a/).length === 3;\n\n/**\n * Split by RegExp. (Polyfill for IE8)\n * @param {string} text - text to be splitted\\\n * @param {RegExp} regexp - regular expression\n * @returns {Array.<string>}\n */\nvar splitByRegExp = (function() {\n  if (isValidSplit) {\n    return function(text, regexp) {\n      return text.split(regexp);\n    };\n  }\n\n  return function(text, regexp) {\n    var result = [];\n    var prevIndex = 0;\n    var match, index;\n\n    if (!regexp.global) {\n      regexp = new RegExp(regexp, 'g');\n    }\n\n    match = regexp.exec(text);\n    while (match !== null) {\n      index = match.index;\n      result.push(text.slice(prevIndex, index));\n\n      prevIndex = index + match[0].length;\n      match = regexp.exec(text);\n    }\n    result.push(text.slice(prevIndex));\n\n    return result;\n  };\n})();\n\n/**\n * Find value in the context by an expression.\n * @param {string} exp - an expression\n * @param {object} context - context\n * @returns {*}\n * @private\n */\n// eslint-disable-next-line complexity\nfunction getValueFromContext(exp, context) {\n  var splitedExps;\n  var value = context[exp];\n\n  if (exp === 'true') {\n    value = true;\n  } else if (exp === 'false') {\n    value = false;\n  } else if (STRING_NOTATION_REGEXP.test(exp)) {\n    value = exp.replace(STRING_REGEXP, '');\n  } else if (BRACKET_NOTATION_REGEXP.test(exp)) {\n    splitedExps = exp.split(BRACKET_REGEXP);\n    value = getValueFromContext(splitedExps[0], context)[getValueFromContext(splitedExps[1], context)];\n  } else if (DOT_NOTATION_REGEXP.test(exp)) {\n    splitedExps = exp.split(DOT_REGEXP);\n    value = getValueFromContext(splitedExps[0], context)[splitedExps[1]];\n  } else if (NUMBER_REGEXP.test(exp)) {\n    value = parseFloat(exp);\n  }\n\n  return value;\n}\n\n/**\n * Extract elseif and else expressions.\n * @param {Array.<string>} ifExps - args of if expression\n * @param {Array.<string>} sourcesInsideBlock - sources inside if block\n * @returns {object} - exps: expressions of if, elseif, and else / sourcesInsideIf: sources inside if, elseif, and else block.\n * @private\n */\nfunction extractElseif(ifExps, sourcesInsideBlock) {\n  var exps = [ifExps];\n  var sourcesInsideIf = [];\n  var otherIfCount = 0;\n  var start = 0;\n\n  // eslint-disable-next-line complexity\n  forEach(sourcesInsideBlock, function(source, index) {\n    if (source.indexOf('if') === 0) {\n      otherIfCount += 1;\n    } else if (source === '/if') {\n      otherIfCount -= 1;\n    } else if (!otherIfCount && (source.indexOf('elseif') === 0 || source === 'else')) {\n      exps.push(source === 'else' ? ['true'] : source.split(' ').slice(1));\n      sourcesInsideIf.push(sourcesInsideBlock.slice(start, index));\n      start = index + 1;\n    }\n  });\n\n  sourcesInsideIf.push(sourcesInsideBlock.slice(start));\n\n  return {\n    exps: exps,\n    sourcesInsideIf: sourcesInsideIf\n  };\n}\n\n/**\n * Helper function for \"if\". \n * @param {Array.<string>} exps - array of expressions split by spaces\n * @param {Array.<string>} sourcesInsideBlock - array of sources inside the if block\n * @param {object} context - context\n * @returns {string}\n * @private\n */\nfunction handleIf(exps, sourcesInsideBlock, context) {\n  var analyzed = extractElseif(exps, sourcesInsideBlock);\n  var result = false;\n  var compiledSource = '';\n\n  forEach(analyzed.exps, function(exp, index) {\n    result = handleExpression(exp, context);\n    if (result) {\n      compiledSource = compile(analyzed.sourcesInsideIf[index], context);\n    }\n\n    return !result;\n  });\n\n  return compiledSource;\n}\n\n/**\n * Helper function for \"each\".\n * @param {Array.<string>} exps - array of expressions split by spaces\n * @param {Array.<string>} sourcesInsideBlock - array of sources inside the each block\n * @param {object} context - context\n * @returns {string}\n * @private\n */\nfunction handleEach(exps, sourcesInsideBlock, context) {\n  var collection = handleExpression(exps, context);\n  var additionalKey = isArray(collection) ? '@index' : '@key';\n  var additionalContext = {};\n  var result = '';\n\n  forEach(collection, function(item, key) {\n    additionalContext[additionalKey] = key;\n    additionalContext['@this'] = item;\n    extend(context, additionalContext);\n\n    result += compile(sourcesInsideBlock.slice(), context);\n  });\n\n  return result;\n}\n\n/**\n * Helper function for \"with ... as\"\n * @param {Array.<string>} exps - array of expressions split by spaces\n * @param {Array.<string>} sourcesInsideBlock - array of sources inside the with block\n * @param {object} context - context\n * @returns {string}\n * @private\n */\nfunction handleWith(exps, sourcesInsideBlock, context) {\n  var asIndex = inArray('as', exps);\n  var alias = exps[asIndex + 1];\n  var result = handleExpression(exps.slice(0, asIndex), context);\n\n  var additionalContext = {};\n  additionalContext[alias] = result;\n\n  return compile(sourcesInsideBlock, extend(context, additionalContext)) || '';\n}\n\n/**\n * Extract sources inside block in place.\n * @param {Array.<string>} sources - array of sources\n * @param {number} start - index of start block\n * @param {number} end - index of end block\n * @returns {Array.<string>}\n * @private\n */\nfunction extractSourcesInsideBlock(sources, start, end) {\n  var sourcesInsideBlock = sources.splice(start + 1, end - start);\n  sourcesInsideBlock.pop();\n\n  return sourcesInsideBlock;\n}\n\n/**\n * Handle block helper function\n * @param {string} helperKeyword - helper keyword (ex. if, each, with)\n * @param {Array.<string>} sourcesToEnd - array of sources after the starting block\n * @param {object} context - context\n * @returns {Array.<string>}\n * @private\n */\nfunction handleBlockHelper(helperKeyword, sourcesToEnd, context) {\n  var executeBlockHelper = BLOCK_HELPERS[helperKeyword];\n  var helperCount = 1;\n  var startBlockIndex = 0;\n  var endBlockIndex;\n  var index = startBlockIndex + EXPRESSION_INTERVAL;\n  var expression = sourcesToEnd[index];\n\n  while (helperCount && isString(expression)) {\n    if (expression.indexOf(helperKeyword) === 0) {\n      helperCount += 1;\n    } else if (expression.indexOf('/' + helperKeyword) === 0) {\n      helperCount -= 1;\n      endBlockIndex = index;\n    }\n\n    index += EXPRESSION_INTERVAL;\n    expression = sourcesToEnd[index];\n  }\n\n  if (helperCount) {\n    throw Error(helperKeyword + ' needs {{/' + helperKeyword + '}} expression.');\n  }\n\n  sourcesToEnd[startBlockIndex] = executeBlockHelper(\n    sourcesToEnd[startBlockIndex].split(' ').slice(1),\n    extractSourcesInsideBlock(sourcesToEnd, startBlockIndex, endBlockIndex),\n    context\n  );\n\n  return sourcesToEnd;\n}\n\n/**\n * Helper function for \"custom helper\".\n * If helper is not a function, return helper itself.\n * @param {Array.<string>} exps - array of expressions split by spaces (first element: helper)\n * @param {object} context - context\n * @returns {string}\n * @private\n */\nfunction handleExpression(exps, context) {\n  var result = getValueFromContext(exps[0], context);\n\n  if (result instanceof Function) {\n    return executeFunction(result, exps.slice(1), context);\n  }\n\n  return result;\n}\n\n/**\n * Execute a helper function.\n * @param {Function} helper - helper function\n * @param {Array.<string>} argExps - expressions of arguments\n * @param {object} context - context\n * @returns {string} - result of executing the function with arguments\n * @private\n */\nfunction executeFunction(helper, argExps, context) {\n  var args = [];\n  forEach(argExps, function(exp) {\n    args.push(getValueFromContext(exp, context));\n  });\n\n  return helper.apply(null, args);\n}\n\n/**\n * Get a result of compiling an expression with the context.\n * @param {Array.<string>} sources - array of sources split by regexp of expression.\n * @param {object} context - context\n * @returns {Array.<string>} - array of sources that bind with its context\n * @private\n */\nfunction compile(sources, context) {\n  var index = 1;\n  var expression = sources[index];\n  var exps, firstExp, result;\n\n  while (isString(expression)) {\n    exps = expression.split(' ');\n    firstExp = exps[0];\n\n    if (BLOCK_HELPERS[firstExp]) {\n      result = handleBlockHelper(firstExp, sources.splice(index, sources.length - index), context);\n      sources = sources.concat(result);\n    } else {\n      sources[index] = handleExpression(exps, context);\n    }\n\n    index += EXPRESSION_INTERVAL;\n    expression = sources[index];\n  }\n\n  return sources.join('');\n}\n\n/**\n * Convert text by binding expressions with context.\n * <br>\n * If expression exists in the context, it will be replaced.\n * ex) '{{title}}' with context {title: 'Hello!'} is converted to 'Hello!'.\n * An array or object can be accessed using bracket and dot notation.\n * ex) '{{odds\\[2\\]}}' with context {odds: \\[1, 3, 5\\]} is converted to '5'.\n * ex) '{{evens\\[first\\]}}' with context {evens: \\[2, 4\\], first: 0} is converted to '2'.\n * ex) '{{project\\[\"name\"\\]}}' and '{{project.name}}' with context {project: {name: 'CodeSnippet'}} is converted to 'CodeSnippet'.\n * <br>\n * If replaced expression is a function, next expressions will be arguments of the function.\n * ex) '{{add 1 2}}' with context {add: function(a, b) {return a + b;}} is converted to '3'.\n * <br>\n * It has 3 predefined block helpers '{{helper ...}} ... {{/helper}}': 'if', 'each', 'with ... as ...'.\n * 1) 'if' evaluates conditional statements. It can use with 'elseif' and 'else'.\n * 2) 'each' iterates an array or object. It provides '@index'(array), '@key'(object), and '@this'(current element).\n * 3) 'with ... as ...' provides an alias.\n * @param {string} text - text with expressions\n * @param {object} context - context\n * @returns {string} - text that bind with its context\n * @memberof module:domUtil\n * @example\n * var template = require('tui-code-snippet/domUtil/template');\n * \n * var source = \n *     '<h1>'\n *   +   '{{if isValidNumber title}}'\n *   +     '{{title}}th'\n *   +   '{{elseif isValidDate title}}'\n *   +     'Date: {{title}}'\n *   +   '{{/if}}'\n *   + '</h1>'\n *   + '{{each list}}'\n *   +   '{{with addOne @index as idx}}'\n *   +     '<p>{{idx}}: {{@this}}</p>'\n *   +   '{{/with}}'\n *   + '{{/each}}';\n * \n * var context = {\n *   isValidDate: function(text) {\n *     return /^\\d{4}-(0|1)\\d-(0|1|2|3)\\d$/.test(text);\n *   },\n *   isValidNumber: function(text) {\n *     return /^\\d+$/.test(text);\n *   }\n *   title: '2019-11-25',\n *   list: ['Clean the room', 'Wash the dishes'],\n *   addOne: function(num) {\n *     return num + 1;\n *   }\n * };\n * \n * var result = template(source, context);\n * console.log(result); // <h1>Date: 2019-11-25</h1><p>1: Clean the room</p><p>2: Wash the dishes</p>\n */\nfunction template(text, context) {\n  return compile(splitByRegExp(text, EXPRESSION_REGEXP), context);\n}\n\nmodule.exports = template;\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Send hostname on DOMContentLoaded.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\nvar isUndefined = __webpack_require__(1);\nvar imagePing = __webpack_require__(31);\n\nvar ms7days = 7 * 24 * 60 * 60 * 1000;\n\n/**\n * Check if the date has passed 7 days\n * @param {number} date - milliseconds\n * @returns {boolean}\n * @private\n */\nfunction isExpired(date) {\n  var now = new Date().getTime();\n\n  return now - date > ms7days;\n}\n\n/**\n * Send hostname on DOMContentLoaded.\n * To prevent hostname set tui.usageStatistics to false.\n * @param {string} appName - application name\n * @param {string} trackingId - GA tracking ID\n * @ignore\n */\nfunction sendHostname(appName, trackingId) {\n  var url = 'https://www.google-analytics.com/collect';\n  var hostname = location.hostname;\n  var hitType = 'event';\n  var eventCategory = 'use';\n  var applicationKeyForStorage = 'TOAST UI ' + appName + ' for ' + hostname + ': Statistics';\n  var date = window.localStorage.getItem(applicationKeyForStorage);\n\n  // skip if the flag is defined and is set to false explicitly\n  if (!isUndefined(window.tui) && window.tui.usageStatistics === false) {\n    return;\n  }\n\n  // skip if not pass seven days old\n  if (date && !isExpired(date)) {\n    return;\n  }\n\n  window.localStorage.setItem(applicationKeyForStorage, new Date().getTime());\n\n  setTimeout(function() {\n    if (document.readyState === 'interactive' || document.readyState === 'complete') {\n      imagePing(url, {\n        v: 1,\n        t: hitType,\n        tid: trackingId,\n        cid: hostname,\n        dp: hostname,\n        dh: appName,\n        el: appName,\n        ec: eventCategory\n      });\n    }\n  }, 1000);\n}\n\nmodule.exports = sendHostname;\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * @fileoverview Request image ping.\n * @author NHN FE Development Lab <dl_javascript@nhn.com>\n */\n\n\n\nvar forEachOwnProperties = __webpack_require__(6);\n\n/**\n * @module request\n */\n\n/**\n * Request image ping.\n * @param {String} url url for ping request\n * @param {Object} trackingInfo infos for make query string\n * @returns {HTMLElement}\n * @memberof module:request\n * @example\n * var imagePing = require('tui-code-snippet/request/imagePing'); // node, commonjs\n *\n * imagePing('https://www.google-analytics.com/collect', {\n *     v: 1,\n *     t: 'event',\n *     tid: 'trackingid',\n *     cid: 'cid',\n *     dp: 'dp',\n *     dh: 'dh'\n * });\n */\nfunction imagePing(url, trackingInfo) {\n  var trackingElement = document.createElement('img');\n  var queryString = '';\n  forEachOwnProperties(trackingInfo, function(value, key) {\n    queryString += '&' + key + '=' + value;\n  });\n  queryString = queryString.substring(1);\n\n  trackingElement.src = url + '?' + queryString;\n\n  trackingElement.style.display = 'none';\n  document.body.appendChild(trackingElement);\n  document.body.removeChild(trackingElement);\n\n  return trackingElement;\n}\n\nmodule.exports = imagePing;\n\n\n/***/ })\n/******/ ]);\n});","import { STATE } from '../state.js';\nimport Pagination from 'tui-pagination';\n// import 'tui-pagination/dist/tui-pagination.css';\nimport '../../../sass/components/_tui-pagination.scss';\nimport {\n  paginDesktopOptions,\n  paginMobileOptions,\n} from './pagination-options.js';\nimport differentFetch from '../../services/different-fetchs.js';\nimport {\n  createCardMarkup,\n  appendCardsMarkup,\n} from '../../services/createCardMarkup.js';\nconst galleryEl = document.querySelector('.gallery');\nconst paginationContainer = document.querySelector('#tui-pagination-container');\n\nlet options = null;\n\nif (window.innerWidth <= 480) {\n  options = paginMobileOptions;\n} else {\n  options = paginDesktopOptions;\n}\n\nconst pagination = new Pagination(paginationContainer, options);\n\npagination.on('beforeMove', loadMore);\n\npagination.on('afterMove', () => {\n  window.scrollTo({ top: 0, behavior: 'smooth' });\n});\nexport function startPage(date) {\n  pagination.reset(date);\n}\n\nasync function loadMore(event) {\n  console.log(STATE.movies);\n\n  const currentPage = event.page;\n  STATE.page = currentPage;\n  const date = await differentFetch(STATE.page);\n  STATE.movies = date.results;\n  console.log(STATE.movies);\n  galleryEl.innerHTML = '';\n  appendCardsMarkup(createCardMarkup(STATE.movies));\n}\n","export const paginDesktopOptions = {\n  totalItems: 0,\n  itemsPerPage: 20,\n  visiblePages: 7,\n  page: 1,\n  centerAlign: true,\n  firstItemClassName: 'tui-first-child',\n  lastItemClassName: 'tui-last-child',\n  usageStatistics: false,\n  template: {\n    page: '<a href=\"#\" class=\"tui-page-btn\">{{page}}</a>',\n    currentPage:\n      '<strong class=\"tui-page-btn tui-is-selected\">{{page}}</strong>',\n    moveButton:\n      '<a href=\"#\" class=\"tui-page-btn tui-{{type}}\">' +\n      '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n      '</a>',\n    disabledMoveButton:\n      '<span class=\"tui-page-btn tui-is-disabled tui-{{type}}\">' +\n      '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n      '</span>',\n    moreButton:\n      '<a href=\"#\" class=\"tui-page-btn tui-{{type}}-is-ellip\">' +\n      '<span class=\"tui-ico-ellip\">...</span>' +\n      '</a>',\n  },\n};\n\nexport const paginMobileOptions = {\n  totalItems: 0,\n  itemsPerPage: 20,\n  visiblePages: 3,\n  page: 1,\n  centerAlign: true,\n  firstItemClassName: 'tui-first-child',\n  lastItemClassName: 'tui-last-child',\n  usageStatistics: false,\n  template: {\n    page: '<a href=\"#\" class=\"tui-page-btn\">{{page}}</a>',\n    currentPage:\n      '<strong class=\"tui-page-btn tui-is-selected\">{{page}}</strong>',\n    moveButton:\n      '<a href=\"#\" class=\"tui-page-btn tui-{{type}}\">' +\n      '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n      '</a>',\n    disabledMoveButton:\n      '<span class=\"tui-page-btn tui-is-disabled tui-{{type}}\">' +\n      '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n      '</span>',\n    moreButton:\n      '<a href=\"#\" class=\"tui-page-btn tui-{{type}}-is-ellip\">' +\n      '<span class=\"tui-ico-ellip\">...</span>' +\n      '</a>',\n  },\n};\n","const inputEl = document.querySelector('.header-search');\nconst line = 'Movie search';\nconst speed = 150;\nconst breakTime = 7000;\nlet i = 0;\n\nexport function ticker() {\n  setTimeout(() => {\n    if (i < line.length) {\n      i += 1;\n      inputEl.placeholder = line.substring(0, i);\n      ticker();\n    } else {\n      setTimeout(tickerBreakTimeSetter, breakTime);\n    }\n    return;\n  }, speed);\n}\n\nexport function tickerBreakTimeSetter() {\n  inputEl.placeholder = ' ';\n  i = 0;\n  ticker();\n}\n","import { STATE } from '../components/state';\r\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\r\nimport {\r\n  // sinInWithEmailPassword,\r\n  // userCreation,\r\n  // signInWithGoogle,\r\n  // onAuthStateChanged,\r\n  app,\r\n  auth,\r\n  provider\r\n} from './firebase/firebaseAPI';\r\nimport {\r\n  getAuth,\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  GoogleAuthProvider,\r\n  signInWithPopup,\r\n  signOut,\r\n} from 'firebase/auth';\r\nimport { save } from './library-storage';\r\nimport { islogin } from './islogin';\r\nimport { switchBTNs } from './swith-buttons';\r\nimport backdropLogin from '../../templates/backdrop';\r\n\r\nlet backdrop = null;\r\nlet loginForm = null;\r\nlet signupForm = null;\r\nlet signoutBtn = null;\r\nlet userProfile = null;\r\nlet loginMsgError = null;\r\n// ↓↓↓ Это для текста ошибки в модалке Sign up\r\nlet signupMsgError = null\r\n\r\nconst inPoint = document.querySelector('body');\r\nconst registrationBtn = document.querySelector('.registrationBtn-container');\r\nregistrationBtn.addEventListener('click', loginChoose);\r\n\r\n// Это кнопки хедера\r\nfunction loginChoose(e) {\r\n  if (e.target.dataset.action === 'signIn') {\r\n    inPoint.insertAdjacentHTML('afterbegin', backdropLogin());\r\n    backdrop = document.querySelector('.auth__backdrop');\r\n    console.dir(backdrop);\r\n    backdrop.addEventListener('click', authModalEvents);\r\n    showSignupForm();\r\n  } else if (e.target.dataset.action === 'logIn') {\r\n    inPoint.insertAdjacentHTML('afterbegin', backdropLogin());\r\n    backdrop = document.querySelector('.auth__backdrop');\r\n    backdrop.addEventListener('click', authModalEvents);\r\n    showLoginForm();\r\n  }\r\n}\r\n\r\nfunction authModalEvents(e) {\r\n  if (!e.target.closest('.auth__wrap') || e.target.closest('.close-btn'))\r\n    closeAuthModal();\r\n\r\n  if (e.target.closest('.show-password-icon')) toggleShowPassword();\r\n\r\n  if (e.target.closest('#linkSigninAccount')) showLoginForm();\r\n  else if (e.target.closest('#linkCreateAccount')) showSignupForm();\r\n\r\n  if (e.target.closest('.login-with-google-btn')) signinWithGoogle();\r\n}\r\n\r\nfunction toggleShowPassword() {\r\n  const showIcon = document.querySelector('.show-password-icon');\r\n  const inputPassword = document.querySelector('.form__input[name=\"password\"]');\r\n  const type =\r\n    inputPassword.getAttribute('type') === 'password' ? 'text' : 'password';\r\n  inputPassword.setAttribute('type', type);\r\n  if (type === 'password') {\r\n    showIcon.firstElementChild.setAttribute(\r\n      'href',\r\n      `${icons}#icon-not-show-password`\r\n    );\r\n  } else if (type === 'text') {\r\n    showIcon.firstElementChild.setAttribute(\r\n      'href',\r\n      `${icons}#icon-show-password`\r\n    );\r\n  }\r\n}\r\n\r\nfunction closeAuthModal() {\r\n  backdrop.remove();\r\n  backdrop.removeEventListener('click', authModalEvents);\r\n}\r\n\r\n// ----------------------- ↓↓↓↓↓ Зачем эти костыли? За объяснениями к Павлу\r\nimport icons from '../../images/icons.svg';\r\nimport closeIcon from '../../images/close.svg';\r\n// -----------------------\r\n\r\nfunction showSignupForm() {\r\n  backdrop.firstElementChild.innerHTML = `<button class=\"close-btn\">\r\n\t<img src=\"${closeIcon}\" alt=\"\" />\r\n</button>\r\n<form class=\"auth__form\" id=\"signup\">\r\n\t<h1 class=\"form__title\">Sign Up</h1>\r\n\t<div class=\"signup-form__message-error\"></div>\r\n\t<div class=\"form__input-group\">\r\n\t\t<input\r\n\t\t\ttype=\"email\"\r\n\t\t\tname=\"email\"\r\n\t\t\tclass=\"form__input\"\r\n\t\t\tplaceholder=\"E-mail\"\r\n\t\t/>\r\n\t\t<svg class=\"email-icon\">\r\n\t\t\t\t\t\t\t<use href=\"${icons}#icon-email-form\"></use>\r\n\t\t\t\t\t\t</svg>\r\n\t</div>\r\n\t<div class=\"form__input-group\">\r\n\t\t<input\r\n\t\t\ttype=\"password\"\r\n\t\t\tname=\"password\"\r\n\t\t\tclass=\"form__input\"\r\n\t\t\tplaceholder=\"Password\"\r\n\t\t>\r\n\t\t<svg class=\"password-icon\">\r\n\t\t\t\t\t\t\t<use href=\"${icons}#icon-password-form\"></use>\r\n\t\t\t\t\t\t</svg>\r\n\t\t<svg class=\"show-password-icon\">\r\n\t\t\t<use href=\"${icons}#icon-not-show-password\"></use>\r\n\t\t</svg>\r\n\t</div>\r\n\t<button class=\"form__btn-submit\" type=\"submit\">Sign Up</button>\r\n\t<button class=\"login-with-google-btn\" type=\"button\">\r\n  Continue with Google\r\n\t</button>\r\n  <p class=\"form__text\">\r\n    Already have account? <a\r\n      href=\"#\"\r\n      class=\"form__link\"\r\n      id=\"linkSigninAccount\"\r\n      >Log In</a>\r\n      </p>\r\n\t</form>`;\r\n  \r\n  signupForm = document.getElementById('signup');\r\n  signupForm.addEventListener('submit', onSignupSubmit);\r\n}\r\n\r\nfunction showLoginForm() {\r\n  backdrop.firstElementChild.innerHTML = `\r\n\t<button class=\"close-btn\">\r\n    <img src=\"${closeIcon}\">\r\n\t\t\t\t</button>\r\n\t\t\t\t<form class=\"auth__form\" id=\"login\">\r\n\t\t\t\t\t<h1 class=\"form__title\">Log In</h1>\r\n\t\t\t\t\t<div class=\"login-form__message-error\"></div>\r\n\t\t\t\t\t<div class=\"form__input-group\">\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\t\tname=\"email\"\r\n\t\t\t\t\t\t\tclass=\"form__input\"\r\n\t\t\t\t\t\t\tplaceholder=\"E-mail\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<svg class=\"email-icon\">\r\n    <use href=\"${icons}#icon-email-form\"></use>\r\n  </svg>\r\n\t\t\t\t\t\t<div class=\"form__input-error-message is-hidden\">Invalid email</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form__input-group\">\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\tname=\"password\"\r\n\t\t\t\t\t\t\tclass=\"form__input\"\r\n\t\t\t\t\t\t\tplaceholder=\"Password\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<svg class=\"password-icon\">\r\n\t\t\t\t\t\t\t<use href=\"${icons}#icon-password-form\"></use>\r\n\t\t\t\t\t\t</svg>\r\n\t\t\t\t\t\t<svg class=\"show-password-icon\">\r\n\t\t\t<use href=\"${icons}#icon-not-show-password\"></use>\r\n\t\t</svg>\r\n\t\t</div>\r\n\t\t\t\t\t<button class=\"form__btn-submit\" type=\"submit\">Log In</button>\r\n\t\t\t\t\t<button class=\"login-with-google-btn\" type=\"button\">\r\n\t\t\t\t\t\tContinue with Google\r\n\t\t\t\t\t</button>\r\n          <p class=\"form__text\">\r\n            Don't have account?\r\n            <a href=\"#\" class=\"form__link\" id=\"linkCreateAccount\">Create account</a> \r\n          </p>\r\n\t\t\t\t</form>`;\r\n  loginForm = document.getElementById('login');\r\n  loginForm.addEventListener('submit', onLoginSubmit);\r\n}\r\n\r\nfunction onLoginSubmit(e) {\r\n  e.preventDefault();\r\n\r\n  loginForm = document.getElementById('login');\r\n  loginMsgError = document.querySelector('.login-form__message-error');\r\n  const { email, password } = loginForm.elements;\r\n  if (email.value && password.value) {\r\n    console.log(email.value, password.value.trim());\r\n\r\n    // signInWithEmailAndPassword(auth, email.value, password.value.trim())\r\n    signInWithEmailAndPassword(auth, email.value, password.value)\r\n      .then(() => {\r\n        Notify.success('You are logged in.');\r\n        console.log(auth.currentUser);\r\n        STATE.user.uid = auth.currentUser.uid;\r\n        save('STATE', STATE);\r\n        switchBTNs(islogin(STATE.user.uid));\r\n        console.log('STATE: ', STATE);\r\n        closeAuthModal();\r\n      })\r\n      .catch(err => {\r\n        if (\r\n          err.code === 'auth/wrong-password' ||\r\n          err.code === 'auth/user-not-found'\r\n        ) {\r\n          loginMsgError.textContent = 'Incorrect email or password';\r\n        }\r\n        console.log(err);\r\n      });\r\n  }\r\n}\r\n\r\nfunction onSignupSubmit(e) {\r\n  e.preventDefault();\r\n\r\n  signupForm = document.getElementById('signup');\r\n  signupMsgError = document.querySelector('.signup-form__message-error');\r\n  const { email, password } = signupForm.elements;\r\n  console.log(email.value, password.value.trim());\r\n\r\n  createUserWithEmailAndPassword(auth, email.value, password.value)\r\n    .then(userCredential => {\r\n      const user = userCredential.user;\r\n      Notify.success('User created!');\r\n      console.log('user: ', user);\r\n      STATE.user.uid = auth.currentUser.uid;\r\n      console.log('STATE: ', STATE);\r\n      save('STATE', STATE);\r\n      switchBTNs(islogin(STATE.user.uid));\r\n      closeAuthModal();\r\n    })\r\n    .catch(err => {\r\n      if (err.code === 'auth/email-already-in-use')\r\n        signupMsgError.textContent = 'Email Already in use';\r\n      if (err.code === 'auth/weak-password') {\r\n        signupMsgError.textContent = 'Password should be at least 6 characters';\r\n      }\r\n      console.log(err.code);\r\n    });\r\n}\r\n\r\nfunction signinWithGoogle() {\r\n  // signInWithPopup(auth, provider)\r\n  signInWithPopup(auth, provider)\r\n    .then(() => {\r\n      Notify.info(`You are signed in with Google`);\r\n      console.log(auth.currentUser);\r\n      STATE.user.uid = auth.currentUser.uid;\r\n      console.log('STATE: ', STATE);\r\n      save('STATE', STATE);\r\n      switchBTNs(islogin(STATE.user.uid));\r\n      closeAuthModal();\r\n    })\r\n    .catch(err => {\r\n      if (\r\n        err.code === 'auth/popup-closed-by-user' ||\r\n        err.code === 'auth/cancelled-popup-request'\r\n      ) {\r\n        return;\r\n      }\r\n      Notify.info(err.code);\r\n      console.log(err);\r\n    });\r\n}\r\n\r\nfunction renderUserProfile(user) {\r\n  authList.classList.add('is-hidden');\r\n  userProfile = document.querySelector('.user-info');\r\n  userProfile.classList.remove('is-hidden');\r\n  userProfile.innerHTML = `\r\n\t<button class=\"btn-signout\">Sign out</button>\r\n\t<p class=\"user-email\">Email: ${auth.currentUser.email}</p>`;\r\n  signoutBtn = document.querySelector('.btn-signout');\r\n  signoutBtn.addEventListener('click', () => {\r\n    signOut(auth)\r\n      .then(() => {\r\n        console.log('Ты вышел🐷. А куда?🤓 А зачем?');\r\n        window.location.reload();\r\n      })\r\n      .catch(err => console.log(err));\r\n  });\r\n}\r\n\r\n// onAuthStateChanged(auth, user => {\r\n//   if (user) {\r\n//     renderUserProfile(user);\r\n//   } else {\r\n//     console.log('Ты не вошел🤡');\r\n//   }\r\n// });\r\n","/*\n* Notiflix Notify AIO (https://notiflix.github.io)\n* Description: This file has been created automatically that using \"notiflix.js\", and \"notiflix.css\" files.\n* Version: 3.2.6\n* Author: Furkan (https://github.com/furcan)\n* Copyright 2019 - 2023 Notiflix, MIT Licence (https://opensource.org/licenses/MIT)\n*/\n\n/* global define */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return factory(root);\n    });\n  } else if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = factory(root);\n  } else {\n    root.Notiflix = factory(root);\n  }\n})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this, function (window) {\n\n  'use strict';\n\n  // COMMON: SSR check: begin\n  if (typeof window === 'undefined' && typeof window.document === 'undefined') {\n    return false;\n  }\n  // COMMON: SSR check: end\n\n  // COMMON: Variables: begin\n  var notiflixNamespace = 'Notiflix';\n  var notiflixConsoleDocs = '\\n\\nVisit documentation page to learn more: https://notiflix.github.io/documentation';\n  var defaultFontFamily = '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif';\n  // COMMON: Variables: end\n\n  // NOTIFY: Default Settings: begin\n  var typesNotify = {\n    Success: 'Success',\n    Failure: 'Failure',\n    Warning: 'Warning',\n    Info: 'Info',\n  };\n  var newNotifySettings;\n  var notifySettings = {\n    wrapID: 'NotiflixNotifyWrap', // can not customizable\n    overlayID: 'NotiflixNotifyOverlay', // can not customizable\n    width: '280px',\n    position: 'right-top', // 'right-top' - 'right-bottom' - 'left-top' - 'left-bottom' - 'center-top' - 'center-bottom' - 'center-center'\n    distance: '10px',\n    opacity: 1,\n    borderRadius: '5px',\n    rtl: false,\n    timeout: 3000,\n    messageMaxLength: 110,\n    backOverlay: false,\n    backOverlayColor: 'rgba(0,0,0,0.5)',\n    plainText: true,\n    showOnlyTheLastOne: false,\n    clickToClose: false,\n    pauseOnHover: true,\n\n    ID: 'NotiflixNotify',\n    className: 'notiflix-notify',\n    zindex: 4001,\n    fontFamily: 'Quicksand',\n    fontSize: '13px',\n    cssAnimation: true,\n    cssAnimationDuration: 400,\n    cssAnimationStyle: 'fade', // 'fade' - 'zoom' - 'from-right' - 'from-top' - 'from-bottom' - 'from-left'\n    closeButton: false,\n    useIcon: true,\n    useFontAwesome: false,\n    fontAwesomeIconStyle: 'basic', // 'basic' - 'shadow'\n    fontAwesomeIconSize: '34px',\n\n    success: {\n      background: '#32c682',\n      textColor: '#fff',\n      childClassName: 'notiflix-notify-success',\n      notiflixIconColor: 'rgba(0,0,0,0.2)',\n      fontAwesomeClassName: 'fas fa-check-circle',\n      fontAwesomeIconColor: 'rgba(0,0,0,0.2)',\n      backOverlayColor: 'rgba(50,198,130,0.2)',\n    },\n\n    failure: {\n      background: '#ff5549',\n      textColor: '#fff',\n      childClassName: 'notiflix-notify-failure',\n      notiflixIconColor: 'rgba(0,0,0,0.2)',\n      fontAwesomeClassName: 'fas fa-times-circle',\n      fontAwesomeIconColor: 'rgba(0,0,0,0.2)',\n      backOverlayColor: 'rgba(255,85,73,0.2)',\n    },\n\n    warning: {\n      background: '#eebf31',\n      textColor: '#fff',\n      childClassName: 'notiflix-notify-warning',\n      notiflixIconColor: 'rgba(0,0,0,0.2)',\n      fontAwesomeClassName: 'fas fa-exclamation-circle',\n      fontAwesomeIconColor: 'rgba(0,0,0,0.2)',\n      backOverlayColor: 'rgba(238,191,49,0.2)',\n    },\n\n    info: {\n      background: '#26c0d3',\n      textColor: '#fff',\n      childClassName: 'notiflix-notify-info',\n      notiflixIconColor: 'rgba(0,0,0,0.2)',\n      fontAwesomeClassName: 'fas fa-info-circle',\n      fontAwesomeIconColor: 'rgba(0,0,0,0.2)',\n      backOverlayColor: 'rgba(38,192,211,0.2)',\n    },\n  };\n  // NOTIFY: Default Settings: end\n\n  // COMMON: Console Error: begin\n  var commonConsoleError = function (message) {\n    return console.error('%c ' + notiflixNamespace + ' Error ', 'padding:2px;border-radius:20px;color:#fff;background:#ff5549', '\\n' + message + notiflixConsoleDocs);\n  };\n  // COMMON: Console Error: end\n\n  // COMMON: Check Head or Body: begin\n  var commonCheckHeadOrBody = function (element) {\n    if (!element) { element = 'head'; }\n    if (window.document[element] === null) {\n      commonConsoleError('\\nNotiflix needs to be appended to the \"<' + element + '>\" element, but you called it before the \"<' + element + '>\" element has been created.');\n      return false;\n    }\n    return true;\n  };\n  // COMMON: Check Head or Body: end\n\n  // COMMON: Set Internal CSS Codes: begin\n  var commonSetInternalCSSCodes = function (getInternalCSSCodes, styleElementId) {\n    // check doc head\n    if (!commonCheckHeadOrBody('head')) { return false; }\n\n    // internal css\n    if (getInternalCSSCodes() !== null && !window.document.getElementById(styleElementId)) {\n      var internalCSS = window.document.createElement('style');\n      internalCSS.id = styleElementId;\n      internalCSS.innerHTML = getInternalCSSCodes();\n      window.document.head.appendChild(internalCSS);\n    }\n  };\n  // COMMON: Set Internal CSS Codes: end\n\n  // COMMON: Extend Options: begin\n  var commonExtendOptions = function () {\n    // variables\n    var extended = {};\n    var deep = false;\n    var i = 0;\n    // check if a deep merge\n    if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\n      deep = arguments[0];\n      i++;\n    }\n    // merge the object into the extended object\n    var merge = function (obj) {\n      for (var prop in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n          // if property is an object, merge properties\n          if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n            extended[prop] = commonExtendOptions(extended[prop], obj[prop]);\n          } else {\n            extended[prop] = obj[prop];\n          }\n        }\n      }\n    };\n    // loop through each object and conduct a merge\n    for (; i < arguments.length; i++) {\n      merge(arguments[i]);\n    }\n    return extended;\n  };\n  // COMMON: Extend Options: end\n\n  // COMMON: Get Plaintext: begin\n  var commonGetPlaintext = function (html) {\n    var htmlPool = window.document.createElement('div');\n    htmlPool.innerHTML = html;\n    return htmlPool.textContent || htmlPool.innerText || '';\n  };\n  // COMMON: Get Plaintext: end\n\n  // NOTIFY: Get Internal CSS Codes: begin\n  var notifyGetInternalCSSCodes = function () {\n    var notifyCSS = '[id^=NotiflixNotifyWrap]{pointer-events:none;position:fixed;z-index:4001;opacity:1;right:10px;top:10px;width:280px;max-width:96%;-webkit-box-sizing:border-box;box-sizing:border-box;background:transparent}[id^=NotiflixNotifyWrap].nx-flex-center-center{max-height:calc(100vh - 20px);overflow-x:hidden;overflow-y:auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;margin:auto}[id^=NotiflixNotifyWrap]::-webkit-scrollbar{width:0;height:0}[id^=NotiflixNotifyWrap]::-webkit-scrollbar-thumb{background:transparent}[id^=NotiflixNotifyWrap]::-webkit-scrollbar-track{background:transparent}[id^=NotiflixNotifyWrap] *{-webkit-box-sizing:border-box;box-sizing:border-box}[id^=NotiflixNotifyOverlay]{-webkit-transition:background .3s ease-in-out;-o-transition:background .3s ease-in-out;transition:background .3s ease-in-out}[id^=NotiflixNotifyWrap]>div{pointer-events:all;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;font-family:\"Quicksand\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif;width:100%;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;position:relative;margin:0 0 10px;border-radius:5px;background:#1e1e1e;color:#fff;padding:10px 12px;font-size:14px;line-height:1.4}[id^=NotiflixNotifyWrap]>div:last-child{margin:0}[id^=NotiflixNotifyWrap]>div.nx-with-callback{cursor:pointer}[id^=NotiflixNotifyWrap]>div.nx-with-icon{padding:8px;min-height:56px}[id^=NotiflixNotifyWrap]>div.nx-paused{cursor:auto}[id^=NotiflixNotifyWrap]>div.nx-notify-click-to-close{cursor:pointer}[id^=NotiflixNotifyWrap]>div.nx-with-close-button{padding:10px 36px 10px 12px}[id^=NotiflixNotifyWrap]>div.nx-with-icon.nx-with-close-button{padding:6px 36px 6px 6px}[id^=NotiflixNotifyWrap]>div>span.nx-message{cursor:inherit;font-weight:normal;font-family:inherit!important;word-break:break-all;word-break:break-word}[id^=NotiflixNotifyWrap]>div>span.nx-close-button{cursor:pointer;-webkit-transition:all .2s ease-in-out;-o-transition:all .2s ease-in-out;transition:all .2s ease-in-out;position:absolute;right:8px;top:0;bottom:0;margin:auto;color:inherit;width:20px;height:20px}[id^=NotiflixNotifyWrap]>div>span.nx-close-button:hover{-webkit-transform:rotate(90deg);transform:rotate(90deg)}[id^=NotiflixNotifyWrap]>div>span.nx-close-button>svg{position:absolute;width:16px;height:16px;right:2px;top:2px}[id^=NotiflixNotifyWrap]>div>.nx-message-icon{position:absolute;width:40px;height:40px;font-size:30px;line-height:40px;text-align:center;left:8px;top:0;bottom:0;margin:auto;border-radius:inherit}[id^=NotiflixNotifyWrap]>div>.nx-message-icon-fa.nx-message-icon-fa-shadow{color:inherit;background:rgba(0,0,0,.15);-webkit-box-shadow:inset 0 0 34px rgba(0,0,0,.2);box-shadow:inset 0 0 34px rgba(0,0,0,.2);text-shadow:0 0 10px rgba(0,0,0,.3)}[id^=NotiflixNotifyWrap]>div>span.nx-with-icon{position:relative;float:left;width:calc(100% - 40px);margin:0 0 0 40px;padding:0 0 0 10px;-webkit-box-sizing:border-box;box-sizing:border-box}[id^=NotiflixNotifyWrap]>div.nx-rtl-on>.nx-message-icon{left:auto;right:8px}[id^=NotiflixNotifyWrap]>div.nx-rtl-on>span.nx-with-icon{padding:0 10px 0 0;margin:0 40px 0 0}[id^=NotiflixNotifyWrap]>div.nx-rtl-on>span.nx-close-button{right:auto;left:8px}[id^=NotiflixNotifyWrap]>div.nx-with-icon.nx-with-close-button.nx-rtl-on{padding:6px 6px 6px 36px}[id^=NotiflixNotifyWrap]>div.nx-with-close-button.nx-rtl-on{padding:10px 12px 10px 36px}[id^=NotiflixNotifyOverlay].nx-with-animation,[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-fade{-webkit-animation:notify-animation-fade .3s ease-in-out 0s normal;animation:notify-animation-fade .3s ease-in-out 0s normal}@-webkit-keyframes notify-animation-fade{0%{opacity:0}100%{opacity:1}}@keyframes notify-animation-fade{0%{opacity:0}100%{opacity:1}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-zoom{-webkit-animation:notify-animation-zoom .3s ease-in-out 0s normal;animation:notify-animation-zoom .3s ease-in-out 0s normal}@-webkit-keyframes notify-animation-zoom{0%{-webkit-transform:scale(0);transform:scale(0)}50%{-webkit-transform:scale(1.05);transform:scale(1.05)}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes notify-animation-zoom{0%{-webkit-transform:scale(0);transform:scale(0)}50%{-webkit-transform:scale(1.05);transform:scale(1.05)}100%{-webkit-transform:scale(1);transform:scale(1)}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-from-right{-webkit-animation:notify-animation-from-right .3s ease-in-out 0s normal;animation:notify-animation-from-right .3s ease-in-out 0s normal}@-webkit-keyframes notify-animation-from-right{0%{right:-300px;opacity:0}50%{right:8px;opacity:1}100%{right:0;opacity:1}}@keyframes notify-animation-from-right{0%{right:-300px;opacity:0}50%{right:8px;opacity:1}100%{right:0;opacity:1}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-from-left{-webkit-animation:notify-animation-from-left .3s ease-in-out 0s normal;animation:notify-animation-from-left .3s ease-in-out 0s normal}@-webkit-keyframes notify-animation-from-left{0%{left:-300px;opacity:0}50%{left:8px;opacity:1}100%{left:0;opacity:1}}@keyframes notify-animation-from-left{0%{left:-300px;opacity:0}50%{left:8px;opacity:1}100%{left:0;opacity:1}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-from-top{-webkit-animation:notify-animation-from-top .3s ease-in-out 0s normal;animation:notify-animation-from-top .3s ease-in-out 0s normal}@-webkit-keyframes notify-animation-from-top{0%{top:-50px;opacity:0}50%{top:8px;opacity:1}100%{top:0;opacity:1}}@keyframes notify-animation-from-top{0%{top:-50px;opacity:0}50%{top:8px;opacity:1}100%{top:0;opacity:1}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-from-bottom{-webkit-animation:notify-animation-from-bottom .3s ease-in-out 0s normal;animation:notify-animation-from-bottom .3s ease-in-out 0s normal}@-webkit-keyframes notify-animation-from-bottom{0%{bottom:-50px;opacity:0}50%{bottom:8px;opacity:1}100%{bottom:0;opacity:1}}@keyframes notify-animation-from-bottom{0%{bottom:-50px;opacity:0}50%{bottom:8px;opacity:1}100%{bottom:0;opacity:1}}[id^=NotiflixNotifyOverlay].nx-with-animation.nx-remove,[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-fade.nx-remove{opacity:0;-webkit-animation:notify-remove-fade .3s ease-in-out 0s normal;animation:notify-remove-fade .3s ease-in-out 0s normal}@-webkit-keyframes notify-remove-fade{0%{opacity:1}100%{opacity:0}}@keyframes notify-remove-fade{0%{opacity:1}100%{opacity:0}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-zoom.nx-remove{-webkit-transform:scale(0);transform:scale(0);-webkit-animation:notify-remove-zoom .3s ease-in-out 0s normal;animation:notify-remove-zoom .3s ease-in-out 0s normal}@-webkit-keyframes notify-remove-zoom{0%{-webkit-transform:scale(1);transform:scale(1)}50%{-webkit-transform:scale(1.05);transform:scale(1.05)}100%{-webkit-transform:scale(0);transform:scale(0)}}@keyframes notify-remove-zoom{0%{-webkit-transform:scale(1);transform:scale(1)}50%{-webkit-transform:scale(1.05);transform:scale(1.05)}100%{-webkit-transform:scale(0);transform:scale(0)}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-from-top.nx-remove{opacity:0;-webkit-animation:notify-remove-to-top .3s ease-in-out 0s normal;animation:notify-remove-to-top .3s ease-in-out 0s normal}@-webkit-keyframes notify-remove-to-top{0%{top:0;opacity:1}50%{top:8px;opacity:1}100%{top:-50px;opacity:0}}@keyframes notify-remove-to-top{0%{top:0;opacity:1}50%{top:8px;opacity:1}100%{top:-50px;opacity:0}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-from-right.nx-remove{opacity:0;-webkit-animation:notify-remove-to-right .3s ease-in-out 0s normal;animation:notify-remove-to-right .3s ease-in-out 0s normal}@-webkit-keyframes notify-remove-to-right{0%{right:0;opacity:1}50%{right:8px;opacity:1}100%{right:-300px;opacity:0}}@keyframes notify-remove-to-right{0%{right:0;opacity:1}50%{right:8px;opacity:1}100%{right:-300px;opacity:0}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-from-bottom.nx-remove{opacity:0;-webkit-animation:notify-remove-to-bottom .3s ease-in-out 0s normal;animation:notify-remove-to-bottom .3s ease-in-out 0s normal}@-webkit-keyframes notify-remove-to-bottom{0%{bottom:0;opacity:1}50%{bottom:8px;opacity:1}100%{bottom:-50px;opacity:0}}@keyframes notify-remove-to-bottom{0%{bottom:0;opacity:1}50%{bottom:8px;opacity:1}100%{bottom:-50px;opacity:0}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-from-left.nx-remove{opacity:0;-webkit-animation:notify-remove-to-left .3s ease-in-out 0s normal;animation:notify-remove-to-left .3s ease-in-out 0s normal}@-webkit-keyframes notify-remove-to-left{0%{left:0;opacity:1}50%{left:8px;opacity:1}100%{left:-300px;opacity:0}}@keyframes notify-remove-to-left{0%{left:0;opacity:1}50%{left:8px;opacity:1}100%{left:-300px;opacity:0}}';\n    return notifyCSS || null;\n  };\n  // NOTIFY: Get Internal CSS Codes: end\n\n  // NOTIFY: Create: begin\n  var notifyCreateCounter = 0;\n  var notifyCreate = function (notifyType, message, callbackOrOptions, options) {\n    // check doc body\n    if (!commonCheckHeadOrBody('body')) { return false; }\n\n    // if not initialized pretend like init\n    if (!newNotifySettings) {\n      Notiflix.Notify.init({});\n    }\n\n    // create a backup for new settings\n    var newNotifySettingsBackup = commonExtendOptions(true, newNotifySettings, {});\n\n    // check callbackOrOptions and options: begin\n    if ((typeof callbackOrOptions === 'object' && !Array.isArray(callbackOrOptions)) || (typeof options === 'object' && !Array.isArray(options))) {\n      // new options\n      var newOptions = {};\n      if (typeof callbackOrOptions === 'object') {\n        newOptions = callbackOrOptions;\n      } else if (typeof options === 'object') {\n        newOptions = options;\n      }\n\n      // extend new settings with the new options\n      newNotifySettings = commonExtendOptions(true, newNotifySettings, newOptions);\n    }\n    // check callbackOrOptions and options: end\n\n    // notify type\n    var theType = newNotifySettings[notifyType.toLocaleLowerCase('en')];\n\n    // notify counter\n    notifyCreateCounter++;\n\n    // check the message: begin\n    if (typeof message !== 'string') {\n      message = 'Notiflix ' + notifyType;\n    }\n    // check the message: end\n\n    // if plainText is true => HTML tags not allowed: begin\n    if (newNotifySettings.plainText) {\n      message = commonGetPlaintext(message); // message plain text\n    }\n    // if plainText is true => HTML tags not allowed: end\n\n    // if plainText is false but the message length more than messageMaxLength => Possible HTML tags error: begin\n    if (!newNotifySettings.plainText && message.length > newNotifySettings.messageMaxLength) {\n      // extend settings for error massege\n      newNotifySettings = commonExtendOptions(true, newNotifySettings, { closeButton: true, messageMaxLength: 150 });\n      // error message\n      message = 'Possible HTML Tags Error: The \"plainText\" option is \"false\" and the notification content length is more than the \"messageMaxLength\" option.';\n    }\n    // if plainText is false but the message length more than messageMaxLength => Possible HTML tags error: end\n\n    // check message max length: begin\n    if (message.length > newNotifySettings.messageMaxLength) {\n      message = message.substring(0, newNotifySettings.messageMaxLength) + '...';\n    }\n    // check message max length: end\n\n    // font awesome icon style: begin\n    if (newNotifySettings.fontAwesomeIconStyle === 'shadow') {\n      theType.fontAwesomeIconColor = theType.background;\n    }\n    // font awesome icon style: end\n\n    // if cssAnimaion is false => duration: begin\n    if (!newNotifySettings.cssAnimation) {\n      newNotifySettings.cssAnimationDuration = 0;\n    }\n    // if cssAnimaion is false => duration: end\n\n    // notify wrap: begin\n    var ntflxNotifyWrap = window.document.getElementById(notifySettings.wrapID) || window.document.createElement('div');\n    ntflxNotifyWrap.id = notifySettings.wrapID;\n    ntflxNotifyWrap.style.width = newNotifySettings.width;\n    ntflxNotifyWrap.style.zIndex = newNotifySettings.zindex;\n    ntflxNotifyWrap.style.opacity = newNotifySettings.opacity;\n\n    // wrap position: begin\n    if (newNotifySettings.position === 'center-center') {\n      ntflxNotifyWrap.style.left = newNotifySettings.distance;\n      ntflxNotifyWrap.style.top = newNotifySettings.distance;\n      ntflxNotifyWrap.style.right = newNotifySettings.distance;\n      ntflxNotifyWrap.style.bottom = newNotifySettings.distance;\n      ntflxNotifyWrap.style.margin = 'auto';\n      ntflxNotifyWrap.classList.add('nx-flex-center-center');\n      ntflxNotifyWrap.style.maxHeight = 'calc((100vh - ' + newNotifySettings.distance + ') - ' + newNotifySettings.distance + ')';\n      ntflxNotifyWrap.style.display = 'flex';\n      ntflxNotifyWrap.style.flexWrap = 'wrap';\n      ntflxNotifyWrap.style.flexDirection = 'column';\n      ntflxNotifyWrap.style.justifyContent = 'center';\n      ntflxNotifyWrap.style.alignItems = 'center';\n      ntflxNotifyWrap.style.pointerEvents = 'none';\n    } else if (newNotifySettings.position === 'center-top') {\n      ntflxNotifyWrap.style.left = newNotifySettings.distance;\n      ntflxNotifyWrap.style.right = newNotifySettings.distance;\n      ntflxNotifyWrap.style.top = newNotifySettings.distance;\n      ntflxNotifyWrap.style.bottom = 'auto';\n      ntflxNotifyWrap.style.margin = 'auto';\n    } else if (newNotifySettings.position === 'center-bottom') {\n      ntflxNotifyWrap.style.left = newNotifySettings.distance;\n      ntflxNotifyWrap.style.right = newNotifySettings.distance;\n      ntflxNotifyWrap.style.bottom = newNotifySettings.distance;\n      ntflxNotifyWrap.style.top = 'auto';\n      ntflxNotifyWrap.style.margin = 'auto';\n    } else if (newNotifySettings.position === 'right-bottom') {\n      ntflxNotifyWrap.style.right = newNotifySettings.distance;\n      ntflxNotifyWrap.style.bottom = newNotifySettings.distance;\n      ntflxNotifyWrap.style.top = 'auto';\n      ntflxNotifyWrap.style.left = 'auto';\n    } else if (newNotifySettings.position === 'left-top') {\n      ntflxNotifyWrap.style.left = newNotifySettings.distance;\n      ntflxNotifyWrap.style.top = newNotifySettings.distance;\n      ntflxNotifyWrap.style.right = 'auto';\n      ntflxNotifyWrap.style.bottom = 'auto';\n    } else if (newNotifySettings.position === 'left-bottom') {\n      ntflxNotifyWrap.style.left = newNotifySettings.distance;\n      ntflxNotifyWrap.style.bottom = newNotifySettings.distance;\n      ntflxNotifyWrap.style.top = 'auto';\n      ntflxNotifyWrap.style.right = 'auto';\n    } else { // 'right-top' or else\n      ntflxNotifyWrap.style.right = newNotifySettings.distance;\n      ntflxNotifyWrap.style.top = newNotifySettings.distance;\n      ntflxNotifyWrap.style.left = 'auto';\n      ntflxNotifyWrap.style.bottom = 'auto';\n    }\n    // wrap position: end\n\n    // if background overlay is true: begin\n    if (newNotifySettings.backOverlay) {\n      var ntflxNotifyOverlay = window.document.getElementById(notifySettings.overlayID) || window.document.createElement('div');\n      ntflxNotifyOverlay.id = notifySettings.overlayID;\n      ntflxNotifyOverlay.style.width = '100%';\n      ntflxNotifyOverlay.style.height = '100%';\n      ntflxNotifyOverlay.style.position = 'fixed';\n      ntflxNotifyOverlay.style.zIndex = newNotifySettings.zindex - 1;\n      ntflxNotifyOverlay.style.left = 0;\n      ntflxNotifyOverlay.style.top = 0;\n      ntflxNotifyOverlay.style.right = 0;\n      ntflxNotifyOverlay.style.bottom = 0;\n      ntflxNotifyOverlay.style.background = theType.backOverlayColor || newNotifySettings.backOverlayColor;\n      ntflxNotifyOverlay.className = newNotifySettings.cssAnimation ? 'nx-with-animation' : '';\n      ntflxNotifyOverlay.style.animationDuration = newNotifySettings.cssAnimation ? newNotifySettings.cssAnimationDuration + 'ms' : '';\n\n      if (!window.document.getElementById(notifySettings.overlayID)) {\n        window.document.body.appendChild(ntflxNotifyOverlay);\n      }\n    }\n    // if background overlay is true: end\n\n    if (!window.document.getElementById(notifySettings.wrapID)) {\n      window.document.body.appendChild(ntflxNotifyWrap);\n    }\n    // notify wrap: end\n\n    // notify content: begin\n    var ntflxNotify = window.document.createElement('div');\n    ntflxNotify.id = newNotifySettings.ID + '-' + notifyCreateCounter;\n    ntflxNotify.className = newNotifySettings.className + ' ' + theType.childClassName + ' ' + (newNotifySettings.cssAnimation ? 'nx-with-animation' : '') + ' ' + (newNotifySettings.useIcon ? 'nx-with-icon' : '') + ' nx-' + newNotifySettings.cssAnimationStyle + ' ' + (newNotifySettings.closeButton && typeof callbackOrOptions !== 'function' ? 'nx-with-close-button' : '') + ' ' + (typeof callbackOrOptions === 'function' ? 'nx-with-callback' : '') + ' ' + (newNotifySettings.clickToClose ? 'nx-notify-click-to-close' : '');\n    ntflxNotify.style.fontSize = newNotifySettings.fontSize;\n    ntflxNotify.style.color = theType.textColor;\n    ntflxNotify.style.background = theType.background;\n    ntflxNotify.style.borderRadius = newNotifySettings.borderRadius;\n    ntflxNotify.style.pointerEvents = 'all';\n\n    // rtl: begin\n    if (newNotifySettings.rtl) {\n      ntflxNotify.setAttribute('dir', 'rtl');\n      ntflxNotify.classList.add('nx-rtl-on');\n    }\n    // rtl: end\n\n    // font-family: begin\n    ntflxNotify.style.fontFamily = '\"' + newNotifySettings.fontFamily + '\", ' + defaultFontFamily;\n    // font-family: end\n\n    // use css animation: begin\n    if (newNotifySettings.cssAnimation) {\n      ntflxNotify.style.animationDuration = newNotifySettings.cssAnimationDuration + 'ms';\n    }\n    // use css animation: end\n\n    // close button element: begin\n    var closeButtonHTML = '';\n    if (newNotifySettings.closeButton && typeof callbackOrOptions !== 'function') {\n      closeButtonHTML = '<span class=\"nx-close-button\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\"><g><path fill=\"' + theType.notiflixIconColor + '\" d=\"M0.38 2.19l7.8 7.81 -7.8 7.81c-0.51,0.5 -0.51,1.31 -0.01,1.81 0.25,0.25 0.57,0.38 0.91,0.38 0.34,0 0.67,-0.14 0.91,-0.38l7.81 -7.81 7.81 7.81c0.24,0.24 0.57,0.38 0.91,0.38 0.34,0 0.66,-0.14 0.9,-0.38 0.51,-0.5 0.51,-1.31 0,-1.81l-7.81 -7.81 7.81 -7.81c0.51,-0.5 0.51,-1.31 0,-1.82 -0.5,-0.5 -1.31,-0.5 -1.81,0l-7.81 7.81 -7.81 -7.81c-0.5,-0.5 -1.31,-0.5 -1.81,0 -0.51,0.51 -0.51,1.32 0,1.82z\"/></g></svg></span>';\n    }\n    // close buttpon element: end\n\n    // use icon: begin\n    if (newNotifySettings.useIcon) {\n      // use font awesome\n      if (newNotifySettings.useFontAwesome) {\n        ntflxNotify.innerHTML = '<i style=\"color:' + theType.fontAwesomeIconColor + '; font-size:' + newNotifySettings.fontAwesomeIconSize + ';\" class=\"nx-message-icon nx-message-icon-fa ' + theType.fontAwesomeClassName + ' ' + (newNotifySettings.fontAwesomeIconStyle === 'shadow' ? 'nx-message-icon-fa-shadow' : 'nx-message-icon-fa-basic') + '\"></i><span class=\"nx-message nx-with-icon\">' + message + '</span>' + (newNotifySettings.closeButton ? closeButtonHTML : '');\n      }\n      // use notiflix icon\n      else {\n        var svgIcon = '';\n        if (notifyType === typesNotify.Success) {  // success\n          svgIcon = '<svg class=\"nx-message-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"0 0 40 40\"><g><path fill=\"' + theType.notiflixIconColor + '\" d=\"M20 0c11.03,0 20,8.97 20,20 0,11.03 -8.97,20 -20,20 -11.03,0 -20,-8.97 -20,-20 0,-11.03 8.97,-20 20,-20zm0 37.98c9.92,0 17.98,-8.06 17.98,-17.98 0,-9.92 -8.06,-17.98 -17.98,-17.98 -9.92,0 -17.98,8.06 -17.98,17.98 0,9.92 8.06,17.98 17.98,17.98zm-2.4 -13.29l11.52 -12.96c0.37,-0.41 1.01,-0.45 1.42,-0.08 0.42,0.37 0.46,1 0.09,1.42l-12.16 13.67c-0.19,0.22 -0.46,0.34 -0.75,0.34 -0.23,0 -0.45,-0.07 -0.63,-0.22l-7.6 -6.07c-0.43,-0.35 -0.5,-0.99 -0.16,-1.42 0.35,-0.43 0.99,-0.5 1.42,-0.16l6.85 5.48z\"/></g></svg>';\n        } else if (notifyType === typesNotify.Failure) { // failure\n          svgIcon = '<svg class=\"nx-message-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"0 0 40 40\"><g><path fill=\"' + theType.notiflixIconColor + '\" d=\"M20 0c11.03,0 20,8.97 20,20 0,11.03 -8.97,20 -20,20 -11.03,0 -20,-8.97 -20,-20 0,-11.03 8.97,-20 20,-20zm0 37.98c9.92,0 17.98,-8.06 17.98,-17.98 0,-9.92 -8.06,-17.98 -17.98,-17.98 -9.92,0 -17.98,8.06 -17.98,17.98 0,9.92 8.06,17.98 17.98,17.98zm1.42 -17.98l6.13 6.12c0.39,0.4 0.39,1.04 0,1.43 -0.19,0.19 -0.45,0.29 -0.71,0.29 -0.27,0 -0.53,-0.1 -0.72,-0.29l-6.12 -6.13 -6.13 6.13c-0.19,0.19 -0.44,0.29 -0.71,0.29 -0.27,0 -0.52,-0.1 -0.71,-0.29 -0.39,-0.39 -0.39,-1.03 0,-1.43l6.13 -6.12 -6.13 -6.13c-0.39,-0.39 -0.39,-1.03 0,-1.42 0.39,-0.39 1.03,-0.39 1.42,0l6.13 6.12 6.12 -6.12c0.4,-0.39 1.04,-0.39 1.43,0 0.39,0.39 0.39,1.03 0,1.42l-6.13 6.13z\"/></g></svg>';\n        } else if (notifyType === typesNotify.Warning) { // warning\n          svgIcon = '<svg class=\"nx-message-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"0 0 40 40\"><g><path fill=\"' + theType.notiflixIconColor + '\" d=\"M21.91 3.48l17.8 30.89c0.84,1.46 -0.23,3.25 -1.91,3.25l-35.6 0c-1.68,0 -2.75,-1.79 -1.91,-3.25l17.8 -30.89c0.85,-1.47 2.97,-1.47 3.82,0zm16.15 31.84l-17.8 -30.89c-0.11,-0.2 -0.41,-0.2 -0.52,0l-17.8 30.89c-0.12,0.2 0.05,0.4 0.26,0.4l35.6 0c0.21,0 0.38,-0.2 0.26,-0.4zm-19.01 -4.12l0 -1.05c0,-0.53 0.42,-0.95 0.95,-0.95 0.53,0 0.95,0.42 0.95,0.95l0 1.05c0,0.53 -0.42,0.95 -0.95,0.95 -0.53,0 -0.95,-0.42 -0.95,-0.95zm0 -4.66l0 -13.39c0,-0.52 0.42,-0.95 0.95,-0.95 0.53,0 0.95,0.43 0.95,0.95l0 13.39c0,0.53 -0.42,0.96 -0.95,0.96 -0.53,0 -0.95,-0.43 -0.95,-0.96z\"/></g></svg>';\n        } else if (notifyType === typesNotify.Info) { // info\n          svgIcon = '<svg class=\"nx-message-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"0 0 40 40\"><g><path fill=\"' + theType.notiflixIconColor + '\" d=\"M20 0c11.03,0 20,8.97 20,20 0,11.03 -8.97,20 -20,20 -11.03,0 -20,-8.97 -20,-20 0,-11.03 8.97,-20 20,-20zm0 37.98c9.92,0 17.98,-8.06 17.98,-17.98 0,-9.92 -8.06,-17.98 -17.98,-17.98 -9.92,0 -17.98,8.06 -17.98,17.98 0,9.92 8.06,17.98 17.98,17.98zm-0.99 -23.3c0,-0.54 0.44,-0.98 0.99,-0.98 0.55,0 0.99,0.44 0.99,0.98l0 15.86c0,0.55 -0.44,0.99 -0.99,0.99 -0.55,0 -0.99,-0.44 -0.99,-0.99l0 -15.86zm0 -5.22c0,-0.55 0.44,-0.99 0.99,-0.99 0.55,0 0.99,0.44 0.99,0.99l0 1.09c0,0.54 -0.44,0.99 -0.99,0.99 -0.55,0 -0.99,-0.45 -0.99,-0.99l0 -1.09z\"/></g></svg>';\n        }\n        ntflxNotify.innerHTML = svgIcon + '<span class=\"nx-message nx-with-icon\">' + message + '</span>' + (newNotifySettings.closeButton ? closeButtonHTML : '');\n      }\n    }\n    // without icon\n    else {\n      ntflxNotify.innerHTML = '<span class=\"nx-message\">' + message + '</span>' + (newNotifySettings.closeButton ? closeButtonHTML : '');\n    }\n    // use icon: end\n    // notify content: end\n\n    // notify append or prepend: begin\n    if (newNotifySettings.position === 'left-bottom' || newNotifySettings.position === 'right-bottom') { // the new one will be first\n      var notifyWrap = window.document.getElementById(notifySettings.wrapID);\n      notifyWrap.insertBefore(ntflxNotify, notifyWrap.firstChild);\n    } else {\n      window.document.getElementById(notifySettings.wrapID).appendChild(ntflxNotify);\n    }\n    // notify append or prepend: end\n\n    // remove by timeout or click: begin\n    var eachNotifyElement = window.document.getElementById(ntflxNotify.id);\n    if (eachNotifyElement) {\n      // timeout variables\n      var timeoutHide;\n      var timeoutRemove;\n\n      // hide notify elm and hide overlay: begin\n      var hideNotifyElementsAndOverlay = function () {\n        eachNotifyElement.classList.add('nx-remove');\n        var removeOverlay = window.document.getElementById(notifySettings.overlayID);\n        if (removeOverlay && ntflxNotifyWrap.childElementCount <= 0) {\n          removeOverlay.classList.add('nx-remove');\n        }\n        clearTimeout(timeoutHide);\n      };\n      // hide notify elm and hide overlay: end\n\n      // remove notify elm and wrapper: begin\n      var removeNotifyElmentsAndWrapper = function () {\n        if (eachNotifyElement && eachNotifyElement.parentNode !== null) {\n          eachNotifyElement.parentNode.removeChild(eachNotifyElement);\n        }\n        if (ntflxNotifyWrap.childElementCount <= 0 && ntflxNotifyWrap.parentNode !== null) { // if childs count === 0 remove wrap\n          ntflxNotifyWrap.parentNode.removeChild(ntflxNotifyWrap);\n          var removeOverlay = window.document.getElementById(notifySettings.overlayID);\n          if (removeOverlay && removeOverlay.parentNode !== null) {\n            removeOverlay.parentNode.removeChild(removeOverlay);\n          }\n        }\n        clearTimeout(timeoutRemove);\n      };\n      // remove notify elm and wrapper: end\n\n      // if has close button and callbackOrOptions is not a function: begin\n      if (newNotifySettings.closeButton && typeof callbackOrOptions !== 'function') {\n        var closeButtonElm = window.document.getElementById(ntflxNotify.id).querySelector('span.nx-close-button');\n        closeButtonElm.addEventListener('click', function () {\n          hideNotifyElementsAndOverlay();\n          var clickToCloseTimeout = setTimeout(function () {\n            removeNotifyElmentsAndWrapper();\n            clearTimeout(clickToCloseTimeout);\n          }, newNotifySettings.cssAnimationDuration);\n        });\n      }\n      // if has close button and callbackOrOptions is not a function: end\n\n      // if callbackOrOptions or click to close: begin\n      if (typeof callbackOrOptions === 'function' || newNotifySettings.clickToClose) {\n        eachNotifyElement.addEventListener('click', function () {\n          if (typeof callbackOrOptions === 'function') {\n            callbackOrOptions();\n          }\n          hideNotifyElementsAndOverlay();\n          var callbackTimeout = setTimeout(function () {\n            removeNotifyElmentsAndWrapper();\n            clearTimeout(callbackTimeout);\n          }, newNotifySettings.cssAnimationDuration);\n        });\n      }\n      // if callbackOrOptions or click to close: end\n\n      // else auto remove: begin\n      if (!newNotifySettings.closeButton && typeof callbackOrOptions !== 'function') {\n        // auto remove: begin\n        var autoRemove = function () {\n          timeoutHide = setTimeout(function () {\n            hideNotifyElementsAndOverlay();\n          }, newNotifySettings.timeout);\n          timeoutRemove = setTimeout(function () {\n            removeNotifyElmentsAndWrapper();\n          }, newNotifySettings.timeout + newNotifySettings.cssAnimationDuration);\n        };\n        autoRemove();\n        // auto remove: end\n\n        // pause auto remove: begin\n        if (newNotifySettings.pauseOnHover) {\n          eachNotifyElement.addEventListener('mouseenter', function () {\n            eachNotifyElement.classList.add('nx-paused');\n            clearTimeout(timeoutHide);\n            clearTimeout(timeoutRemove);\n          });\n          eachNotifyElement.addEventListener('mouseleave', function () {\n            eachNotifyElement.classList.remove('nx-paused');\n            autoRemove();\n          });\n        }\n        // pause auto remove: end\n      }\n      // else auto remove: end\n    }\n    // remove by timeout or click: end\n\n    // notify - show only the last one: begin\n    if (newNotifySettings.showOnlyTheLastOne && notifyCreateCounter > 0) {\n      var allNotifyElmNotTheLastOne = window.document.querySelectorAll('[id^=' + newNotifySettings.ID + '-]:not([id=' + newNotifySettings.ID + '-' + notifyCreateCounter + '])');\n      for (var i = 0; i < allNotifyElmNotTheLastOne.length; i++) {\n        var eachNotifyElmNotLastOne = allNotifyElmNotTheLastOne[i];\n        if (eachNotifyElmNotLastOne.parentNode !== null) {\n          eachNotifyElmNotLastOne.parentNode.removeChild(eachNotifyElmNotLastOne);\n        }\n      }\n    }\n    // notify - show only the last one: end\n\n    // extend new settings with the backup settings\n    newNotifySettings = commonExtendOptions(true, newNotifySettings, newNotifySettingsBackup);\n\n  };\n  // NOTIFY: Create: end\n\n  var Notiflix = {\n    Notify: {\n      // Init\n      init: function (userNotifyOptions) {\n        // extend options\n        newNotifySettings = commonExtendOptions(true, notifySettings, userNotifyOptions);\n        // internal css if exist\n        commonSetInternalCSSCodes(notifyGetInternalCSSCodes, 'NotiflixNotifyInternalCSS');\n      },\n      // Merge First Init\n      merge: function (userNotifyExtendOptions) {\n        // if initialized already\n        if (newNotifySettings) {\n          newNotifySettings = commonExtendOptions(true, newNotifySettings, userNotifyExtendOptions);\n        }\n        // initialize first\n        else {\n          commonConsoleError('You have to initialize the Notify module before call Merge function.');\n          return false;\n        }\n      },\n      // Success\n      success: function (message, callbackOrOptions, options) {\n        notifyCreate(typesNotify.Success, message, callbackOrOptions, options);\n      },\n      // Failure\n      failure: function (message, callbackOrOptions, options) {\n        notifyCreate(typesNotify.Failure, message, callbackOrOptions, options);\n      },\n      // Warning\n      warning: function (message, callbackOrOptions, options) {\n        notifyCreate(typesNotify.Warning, message, callbackOrOptions, options);\n      },\n      // Info\n      info: function (message, callbackOrOptions, options) {\n        notifyCreate(typesNotify.Info, message, callbackOrOptions, options);\n      },\n    },\n  };\n\n  if (typeof window.Notiflix === 'object') {\n    return commonExtendOptions(true, window.Notiflix, { Notify: Notiflix.Notify });\n  } else {\n    return { Notify: Notiflix.Notify };\n  }\n\n});","module.exports = require('./helpers/bundle-url').getBundleURL('EVgbq') + require('./helpers/bundle-manifest').resolve(\"410VS\");","module.exports = require('./helpers/bundle-url').getBundleURL('EVgbq') + require('./helpers/bundle-manifest').resolve(\"ilVCE\");","export default function backdropLogin() {\r\n  return `\r\n     <div class=\"auth__backdrop\">\r\n      <div class=\"auth__wrap\"><!-- тут будет модалка --></div>\r\n    </div>`;\r\n}\r\n","function scrollFunction() {\n  if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {\n    buttons.classList.remove('floating-buttons--hidden');\n  } else {\n    buttons.classList.add('floating-buttons--hidden');\n  }\n}\n\nwindow.onscroll = function () {\n  scrollFunction();\n};\n\nconst homeBtn = document.querySelector('.js-home-btn');\nconst scrollTopBtn = document.querySelector('.js-scroll-btn');\nconst buttons = document.querySelector('.js-floating-buttons');\n\nfunction scrollToTop() {\n  window.scrollTo({ top: 0, behavior: 'smooth' });\n}\n\nhomeBtn.addEventListener('click', () => {\n  // add home function\n});\nscrollTopBtn.addEventListener('click', scrollToTop);\n","import { STATE } from '../../components/state.js';\nimport { firebaseConfig } from './firebase-config.js';\nimport { initializeApp } from 'firebase/app';\nimport { getDatabase, ref, set, child, get, onValue } from 'firebase/database';\nconst app = initializeApp(firebaseConfig);\n\nconst database = getDatabase(app);\n\nexport async function writeUserData(data) {\n  try {\n    const setdata = await set(ref(database, `users/${data.uid}`), data);\n    console.log(setdata);\n  } catch (error) {\n    const errorCode = error.code;\n    console.log('writeUserData errorCode: ', errorCode);\n    const errorMessage = error.message;\n    console.log('writeUserData errorMessage: ', errorMessage);\n  }\n}\nexport async function getUserData(userId) {\n  try {\n    const database = getDatabase(app);\n\n    console.log('userId: ', userId);\n    const data = await get(ref(database, 'users/' + userId));\n    onValue(data, snapshot => {\n      const resp = snapshot.val();\n      console.log(resp);\n    });\n  } catch (error) {\n    const errorCode = error.code;\n    console.log('getUserData errorCode: ', errorCode);\n    const errorMessage = error.message;\n    console.log('getUserData errorMessage: ', errorMessage);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false,\n    public readonly isUsingEmulator: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n      this.myIFrame.doc.body.textContent = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        const handshakePayload = {\n          ...(payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          })\n        };\n        if (this.repoInfo_.isUsingEmulator) {\n          // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n          handshakePayload.h = this.repoInfo_.host;\n        }\n        this.onHandshake_(handshakePayload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  private startIsInclusive_: boolean;\n\n  private endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    const isWithinStart = this.startIsInclusive_\n      ? this.index_.compare(this.getStartPost(), node) <= 0\n      : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_\n      ? this.index_.compare(node, this.getEndPost()) <= 0\n      : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  private readonly startIsInclusive_: boolean;\n\n  private readonly endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n\n        let count = 0;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange =\n            count < this.limit_ &&\n            this.withinDirectionalStart(next) &&\n            this.withinDirectionalEnd(next);\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n\n  private withinDirectionalStart = (node: NamedNode) =>\n    this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n\n  private withinDirectionalEnd = (node: NamedNode) =>\n    this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n\n  private withinStartPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      this.rangedFilter_.getStartPost(),\n      node\n    );\n    return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n\n  private withinEndPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      node,\n      this.rangedFilter_.getEndPost()\n    );\n    return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_START_IS_INCLUSIVE = 'sin',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  INDEX_END_IS_INCLUSIVE = 'ein',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AFTER = 'startAfter',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  END_BEFORE = 'endBefore',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false; // can only be true if startSet_ is true\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false; // can only be true if endSet_ is true\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_\n      ? REST_QUERY_CONSTANTS.START_AFTER\n      : REST_QUERY_CONSTANTS.START_AT;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_\n      ? REST_QUERY_CONSTANTS.END_BEFORE\n      : REST_QUERY_CONSTANTS.END_AT;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE] =\n      !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE] =\n      !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\nexport function resetSyncTreeTag() {\n  syncTreeNextQueryTag_ = 1;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams,\n    /*isUsingEmulator=*/ true\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n  if (!db._instanceStarted) {\n    const emulator = getDefaultEmulatorHostnameAndPort('database');\n    if (emulator) {\n      connectDatabaseEmulator(db, ...emulator);\n    }\n  }\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n"],"names":["parcelRequire","register","JSON","parse","$bpxeT","page","$c3229f5265435910$var$_differentFetch","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","$6v6Md","STATE","keyword","$4iERr","default","getMovieByKeyword","getPopMovies","$05639a25b671078b$var$galleryEl","document","querySelector","$05639a25b671078b$var$searchForm","$05639a25b671078b$var$inputQuere","$05639a25b671078b$var$_handlerSearch","e","respons","flag","preventDefault","value","$c3229f5265435910$export$2e2bcd8739ae039","_ctx","sent","results","length","console","log","movies","innerHTML","$1J7KA","appendCardsMarkup","createCardMarkup","$05639a25b671078b$var$toggleNotification","t0","notifyEl","classList","add","remove","setTimeout","addEventListener","factory","window","modules","installedModules","__webpack_require__","moduleId","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","t","mode","__esModule","ns","create","key1","key","bind","n","object","property","prototype","hasOwnProperty","p","s","target","objects","source","prop","len","hasOwnProp","obj","undefined","Array","isArray","forEachArray","forEachOwnProperties","iteratee","context","String","Function","inherit","extend","parent","props","init","searchElement","array","startIndex","indexOf","template","sendHostname","isFunction","util","capitalizeFirstLetter","str","substring","toUpperCase","isContained","find","contains","createElementByTemplate","tmpl","createElement","html","firstChild","fn","args","slice","concat","sendHostName","CustomEvents","defineClass","isUndefined","View","defaultOption","totalItems","itemsPerPage","visiblePages","centerAlign","firstItemClassName","lastItemClassName","usageStatistics","Pagination","container","options","_options","_currentPage","_view","_onClickHandler","_paginate","_setCurrentPage","_getLastPage","lastPage","Math","ceil","_getPageIndex","pageNumber","pageIndex","floor","max","min","_getRelativePage","moveType","isPrevMove","currentPage","getCurrentPage","_getMorePageIndex","currentPageIndex","pageCount","_convertToValidPage","lastPageNumber","viewData","_makeViewData","update","lastPageListIndex","edges","_getEdge","leftPageNumber","left","rightPageNumber","right","prevMore","nextMore","buttonType","movePageTo","reset","targetPage","invoke","fire","setTotalItems","itemCount","setItemsPerPage","mixin","isExisty","isString","isObject","forEach","R_EVENTNAME_SPLIT","events","contexts","func","_getHandlerItem","handler","item","_safeEvent","eventName","byName","_safeContext","_indexOfContext","ctx","index","_memorizeContext","push","_forgetContext","contextIndex","splice","_bindEvent","on","self","split","once","onceHandler","off","_spliceMatches","arr","predicate","_matchHandler","needRemove","_matchContext","_matchHandlerAndContext","matchHandler","matchContext","_offByEventName","andByHandler","handlerItems","_offByHandler","_offByObject","matchFunc","hasListener","getListenerLength","isNull","param","createObject","subType","superType","constructor","F","getTarget","addClass","isHTMLNode","defaultTemplate","moveButton","disabledMoveButton","moreButton","moveButtons","moreButtons","_containerElement","_firstItemClassName","_lastItemClassName","_template","_buttons","_enabledPageElements","_setRootElement","_setMoveButtons","_setDisabledMoveButtons","_setMoreButtons","_attachClickEvent","getElementById","jquery","Error","type","_getContainerElement","_appendFirstButton","button","first","disabledFirst","appendChild","_appendPrevButton","prev","disabledPrev","_appendNextButton","next","disabledNext","_appendLastButton","last","disabledLast","_appendPrevMoreButton","_appendNextMoreButton","_appendPages","pageItem","firstPage","callback","rootElement","ev","_getButtonType","_getPageNumber","targetElement","buttons","_findPageElement","parseInt","innerText","pickedItem","_empty","buttonElement","cloneNode","srcElement","safeEvent","bindEvent","element","eventHandler","event","attachEvent","wrappedHandler","existInEvents","memorizeHandler","types","EVENT_KEY","handlers","returnValue","inArray","getClass","setClassName","origin","cssClass","newClass","cls","className","baseVal","join","replace","HTMLElement","nodeType","EXPRESSION_REGEXP","BRACKET_NOTATION_REGEXP","BRACKET_REGEXP","DOT_NOTATION_REGEXP","DOT_REGEXP","STRING_NOTATION_REGEXP","STRING_REGEXP","NUMBER_REGEXP","BLOCK_HELPERS","if","exps","sourcesInsideBlock","analyzed","ifExps","sourcesInsideIf","otherIfCount","start","extractElseif","result","compiledSource","exp","handleExpression","compile","each","collection","additionalKey","additionalContext","with","asIndex","alias","splitByRegExp","text","regexp","match","prevIndex","global","RegExp","exec","getValueFromContext","splitedExps","test","parseFloat","handleBlockHelper","helperKeyword","sourcesToEnd","endBlockIndex","end","executeBlockHelper","helperCount","startBlockIndex","expression","pop","helper","argExps","executeFunction","sources","firstExp","imagePing","appName","trackingId","hostname","location","applicationKeyForStorage","date","localStorage","getItem","tui","Date","getTime","isExpired","setItem","readyState","v","tid","cid","dp","dh","el","ec","url","trackingInfo","trackingElement","queryString","src","style","display","body","removeChild","$167b1d540c0934e6$exports","$8dffa78bb43ca207$var$galleryEl","$8dffa78bb43ca207$var$paginationContainer","$8dffa78bb43ca207$var$options","innerWidth","$8dffa78bb43ca207$var$pagination","$8dffa78bb43ca207$export$bfa07905d8d7dc88","$8dffa78bb43ca207$var$_loadMore","scrollTo","top","behavior","$253051aed3d59aff$var$inputEl","$253051aed3d59aff$var$line","$253051aed3d59aff$var$i","$253051aed3d59aff$export$e94d57566be028aa","placeholder","$253051aed3d59aff$export$90a329873497d6fc","root","define","amd","$c72c4ee5f4be9835$exports","Notiflix","$parcel$global","newNotifySettings","typesNotify","notifySettings","wrapID","overlayID","width","position","distance","opacity","borderRadius","rtl","timeout","messageMaxLength","backOverlay","backOverlayColor","plainText","showOnlyTheLastOne","clickToClose","pauseOnHover","ID","zindex","fontFamily","fontSize","cssAnimation","cssAnimationDuration","cssAnimationStyle","closeButton","useIcon","useFontAwesome","fontAwesomeIconStyle","fontAwesomeIconSize","success","background","textColor","childClassName","notiflixIconColor","fontAwesomeClassName","fontAwesomeIconColor","failure","warning","info","commonConsoleError","message","error","commonCheckHeadOrBody","commonExtendOptions","extended","deep","toString","merge","notifyGetInternalCSSCodes","notifyCreateCounter","notifyCreate","notifyType","callbackOrOptions","Notify","newNotifySettingsBackup","newOptions","htmlPool","theType","toLocaleLowerCase","textContent","ntflxNotifyWrap","id","zIndex","bottom","margin","maxHeight","flexWrap","flexDirection","justifyContent","alignItems","pointerEvents","ntflxNotifyOverlay","height","animationDuration","ntflxNotify","color","setAttribute","closeButtonHTML","svgIcon","notifyWrap","insertBefore","eachNotifyElement","timeoutHide","timeoutRemove","hideNotifyElementsAndOverlay","removeOverlay","childElementCount","clearTimeout","removeNotifyElmentsAndWrapper","parentNode","clickToCloseTimeout","callbackTimeout","autoRemove","allNotifyElmNotTheLastOne","querySelectorAll","eachNotifyElmNotLastOne","userNotifyOptions","getInternalCSSCodes","styleElementId","internalCSS","head","commonSetInternalCSSCodes","userNotifyExtendOptions","$ef33cbb6b4540f9d$exports","getBundleURL","resolve","$91f41b0d94a87989$exports","$55a40789897a37bb$var$backdrop","$55a40789897a37bb$var$loginForm","$55a40789897a37bb$var$signupForm","$55a40789897a37bb$var$loginMsgError","$55a40789897a37bb$var$signupMsgError","$55a40789897a37bb$var$inPoint","$55a40789897a37bb$var$authModalEvents","showIcon","inputPassword","closest","$55a40789897a37bb$var$closeAuthModal","getAttribute","firstElementChild","$55a40789897a37bb$var$showLoginForm","$55a40789897a37bb$var$showSignupForm","$gQOBw","signInWithPopup","$iK28L","auth","provider","then","currentUser","user","uid","$6yfxu","save","$hDVFF","switchBTNs","$bMFcV","islogin","catch","err","code","removeEventListener","$55a40789897a37bb$var$onSignupSubmit","$55a40789897a37bb$var$onLoginSubmit","_elements","elements","email","password","trim","signInWithEmailAndPassword","createUserWithEmailAndPassword","userCredential","dataset","action","insertAdjacentHTML","dir","onscroll","scrollTop","documentElement","$33cde83704c31556$var$buttons","$33cde83704c31556$var$homeBtn","$33cde83704c31556$var$scrollTopBtn","$a9d69158b154a93b$var$SDK_VERSION","$8MBJY","DOMStorageWrapper","domStorage_","prefix_","$a2hTj","removeItem","prefixedName_","$2xDiJ","stringify","storedVal","$a9d69158b154a93b$var$MemoryStorage","MemoryStorage","cache_","isInMemoryStorage","$a9d69158b154a93b$var$createStoragefor","domStorageName","domStorage","$a9d69158b154a93b$var$DOMStorageWrapper","$a9d69158b154a93b$var$PersistentStorage","$a9d69158b154a93b$var$SessionStorage","$kZfxc","Logger","stringToByteArray","sha11","digest","base64","encodeByteArray","sha1Bytes","_key","arg","varArgs","$a9d69158b154a93b$var$buildLogMessage_","$a9d69158b154a93b$var$logger","$a9d69158b154a93b$var$enableLogging$1","logger_","persistent","assert","$a9d69158b154a93b$var$logClient","logLevel","LogLevel","VERBOSE","set","$a9d69158b154a93b$var$log","$a9d69158b154a93b$var$firstLog_","$a9d69158b154a93b$var$logWrapper","prefix","_len","$8nrFW","$a9d69158b154a93b$var$error","$a9d69158b154a93b$var$fatal","warn","$a9d69158b154a93b$var$isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","$a9d69158b154a93b$var$MIN_NAME","$a9d69158b154a93b$var$MAX_NAME","$a9d69158b154a93b$var$nameCompare","a","b","bAsInt","$a9d69158b154a93b$var$stringCompare","$a9d69158b154a93b$var$ObjectToUniqueKey","keys","k","sort","segsize","f","ln","Infinity","pow","bias","round","hexByte","toLowerCase","time","Deno","unrefTimer","appName_","appCheckProvider","AppCheckTokenProvider","getImmediate","forceRefresh","appCheck","getToken","_this1","_this","listener","_a","addTokenListener","$a9d69158b154a93b$var$warn","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","optional","onInit","Promise","reject","_this2","addAuthTokenListener","removeAuthTokenListener","errorMessage","$a9d69158b154a93b$var$EmulatorTokenProvider","EmulatorTokenProvider","accessToken","namespace","webSocketOnly","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","RepoInfo","secure","host","_host","substr","internalHost","_domain","newHost","isCacheableHost","protocol","query2","repoInfo","params","connURL","$a9d69158b154a93b$var$LONG_POLLING","isCustomHost","pairs","StatsCollection","name2","amount","counters_","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","responseNum","onClose","requestNum","_loop","toProcess","$a9d69158b154a93b$var$exceptionGuard","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","BrowserPollConnection","bytesSent","$a9d69158b154a93b$var$statsManagerGetCollection","_this4","curSegmentNum","onDisconnect_","onDisconnect1","myPacketOrderer","$a9d69158b154a93b$var$PacketReceiver","onMessage","isClosed_","onClosed_","isNodeSdk","called","wrappedFn","_this3","_args","$1t1Wn","command","arg1","arg2","incrementIncomingBytes_","scriptTagHolder","connectTimeoutTimer_","everConnected_","$a9d69158b154a93b$var$FIREBASE_LONGPOLL_START_PARAM","sendNewPolls","closeAfter","handleResponse","pN","urlParams","random","$a9d69158b154a93b$var$PROTOCOL_VERSION","connectURL","urlFn","log_","addTag","startLongPoll","addDisconnectPingFrame","myDisconnFrame","shutdown_","dataStr","stats_","incrementCounter","base64data","base64Encode","dataSegs","$a9d69158b154a93b$var$splitStringBySize","$a9d69158b154a93b$var$MAX_URL_DATA_SIZE","enqueueSegment","pw","bytesReceived","forceAllow_","forceDisallow_","href","FirebaseIFrameScriptHolder","commandCB","onMessageCB","onDisconnect2","Set","currentSerial","uniqueCallbackIdentifier","myIFrame","createIFrame_","script","domain","iframeContents","doc","open","write","close","stack","alive","onDisconnect3","onDisconnect","myPW","newRequest_","outstandingRequests","size","pendingSegs","theURL","curDataString","theSeg","shift","seg","ts","addLongPollTag_","segnum","serial","delete","doNewRequest","keepaliveTimeout","loadCB","_this5","newScript","onload","onreadystatechange","rstate","onerror","iframe","contentWindow","contentDocument","$a9d69158b154a93b$var$WebSocketImpl","MozWebSocket","WebSocket","connectionURL_","nodeAdmin","WebSocketConnection","onDisconnect4","device","headers","$6qd2L","platform","proxy","env","mySock","e1","onopen","onclose","handleIncomingFrame","frames","totalFrames","fullMess","jsonMess","jsonEval","frameCount","isNaN","handleNewFrameCount_","mess","appendFrame_","remainingData","extractFrameCount_","resetKeepAlive","sendString_","keepaliveTimer","clearInterval","setInterval","send","isOldAndroid","oldAndroidMatch","navigator","userAgent","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","isWebSocketsAvailable","isSkipPollConnection","transports_","$a9d69158b154a93b$var$WebSocketConnection","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","ALL_TRANSPORTS","iterator","done","return","globalTransportInitialized_","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","Connection","state_","conn_","conn","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","isHealthy_","healthyTimeoutMS","healthyTimeout_","$a9d69158b154a93b$var$setTimeoutNonBlocking","markConnectionHealthy","everConnected","onConnectionLost_","secondaryConn_","rx_","onPrimaryMessageReceived_","dataMsg","sendData_","msg","tx_","controlData","cmd","secondaryResponsesRequired_","upgradeIfSecondaryHealthy_","parsedData","layer","$a9d69158b154a93b$var$requireKey","onSecondaryControl_","pendingDataMessages","proceedWithUpgrade_","tryCleanupConnection","onControl_","onDataMessage_","payload","handshakePayload","assign","onConnectionShutdown_","onPrimaryResponse_","sendPingOnPrimaryIfNecessary_","sessionId","handshake","onConnectionEstablished_","timestamp","version2","transportManager_","upgradeTransport","startUpgrade_","onDisconnect5","closeConnections_","start_","reason","ServerActions","pathString","onComplete","stats","allowedEvents_","EventEmitter","eventType","listeners_","listeners","validateEventType_","eventData","getInitialEvent","et","$eYQtU","OnlineMonitor","$2MbLg","_super","online_","isMobileCordova","trigger","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","Path","path","begin","pieces","childPathObj","$a9d69158b154a93b$var$Path","i1","$a9d69158b154a93b$var$newRelativePath","outerPath","innerPath","outer","inner","$a9d69158b154a93b$var$pathPopFront","other","$a9d69158b154a93b$var$pathGetLength","j","ValidationPath","errorPrefix_","byteLength_","parts_","stringLength","validationPath","$a9d69158b154a93b$var$validationPathToErrorString","VisibilityMonitor","visibilityChange","hidden","visible_","visible","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","Map","$a9d69158b154a93b$var$RECONNECT_MIN_DELAY","realtime_","$a9d69158b154a93b$var$OnlineMonitor","getInstance","onOnline_","$ds8z5","onResponse","curReqNum","requestNumber_","connected_","requestCBHash_","initConnection_","Deferred","_path","query4","currentHashFn","tag","queryId","listens","has","listenSpec","sendListen_","get1","outstandingGets_","sendRequest","request","outstandingGetCount_","query5","_queryIdentifier","req","_queryObject","hashFn","status","warnOnListenWarnings_","token","reduceReconnectDelayIfAdminCredential_","credential","tryAppCheck","authMethod","isValidFormat","requestData","onAuthRevoked_","res","invalidAppCheckTokenCount_","onAppCheckRevoked_","query6","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectRequestQueue_","response","hash","putInternal","outstandingPuts_","outstandingPutCount_","queued","errorReason","reqNum","onDataPush_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","establishConnectionTimer_","establishConnection_","scheduleConnect_","reconnectDelay_","maxReconnectDelay_","online","cancelSentTransactions_","shouldReconnect_","lastConnectionAttemptTime_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","onDisconnect6","onRealtimeDisconnect_","nextConnectionId_","canceled","sendRequestFn","closeFn","forceTokenRefresh_","all","t1","ref1","connection","$a9d69158b154a93b$var$Connection","t2","interruptReasons_","delta","put","query7","map","q","removeListen_","listen","normalizedPathString","map1","statusCode","explanation","invalidAuthTokenCount_","notifyForInvalidToken","tryAuth","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","queries","values","setMaxNode","MAX_NODE","i3","sendGet_","clientName","isReactNative","reportStats","isEmpty","warnings","safeGet","indexSpec","query8","_queryParams","getIndex","name3","node","NamedNode","Index","compare","oldNode","newNode","oldWrapped","$a9d69158b154a93b$var$NamedNode","newWrapped","MIN","KeyIndex","assertionError","val","$a9d69158b154a93b$var$KeyIndex","startKey","comparator","isReverse_","SortedMapIterator","cmp","nodeStack_","resultGenerator_","LLRBNode","RED","$a9d69158b154a93b$var$SortedMap","EMPTY_NODE","count","inorderTraversal","reverseTraversal","min_","maxKey","copy","insert","fixUp_","smallest","isRed_","rotateRight_","moveRedRight_","removeMin_","colorFlip_","rotateLeft_","nl","nr","blackDepth","check_","BLACK","LLRBEmptyNode","$a9d69158b154a93b$var$LLRBNode","comparator_","SortedMap","root_","rightParent","minKey","setPriorityMaxNode","resultGenerator","$a9d69158b154a93b$var$SortedMapIterator","$a9d69158b154a93b$var$NAME_ONLY_COMPARATOR","$a9d69158b154a93b$var$NAME_COMPARATOR","$a9d69158b154a93b$var$LLRBEmptyNode","priority","$a9d69158b154a93b$var$doubleToIEEE754String","isLeafNode","priorityNode","$a9d69158b154a93b$var$MAX_NODE$2","getPriority","value_","priorityNode_","newPriorityNode","LeafNode","childName","__childrenNodeConstructor","childNode","newChildNode","front","$a9d69158b154a93b$var$pathGetFront","updateImmediateChild","updateChild","exportFormat","getValue","lazyHash_","toHash","$a9d69158b154a93b$var$priorityHashText","$l5bVx","compareToLeafNode_","otherLeaf","otherIndex","VALUE_TYPE_ORDER","otherLeafType","thisIndex","thisLeafType","PriorityIndex","aPriority","bPriority","indexCmp","$a9d69158b154a93b$var$LeafNode","$a9d69158b154a93b$var$MAX_NODE$1","name5","$a9d69158b154a93b$var$PriorityIndex","Base12Num","num","bits","bits_","current_","childList","keyFn","mapSortFn","low","high","namedNode","middle","chunkSize","buildBalancedTree","attachPennant","pennant","base12","isOne","nextBitIsOne","chunkSize1","buildPennant","$a9d69158b154a93b$var$Base12Num","root1","indexes_","indexSet_","IndexMap","indexKey","sortedMap","indexDefinition","sawIndexedValue","iter","existingChildren","getIterator","Wrap","getNext","indexName","newIndexSet","newIndexes","indexedChildren","$a9d69158b154a93b$var$fallbackObject","$a9d69158b154a93b$var$buildChildSet","getCompare","existingSnap","newChildren","$a9d69158b154a93b$var$PRIORITY_INDEX","$a9d69158b154a93b$var$_defaultIndexMap","ChildrenNode","children_","indexMap_","$a9d69158b154a93b$var$validatePriorityNode","$a9d69158b154a93b$var$EMPTY_NODE","child2","getImmediateChild","getChild","updatePriority","newIndexMap","removeFromIndexes","addToIndexes","newPriority","newImmediateChild","numKeys","allIntegerKeys","forEachChild","INTEGER_REGEXP_","$a9d69158b154a93b$var$sha1","idx","predecessor","getPredecessorKey","resolveIndex_","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","startPost","peek","maxPost","endPost","getReverseIteratorFrom","$a9d69158b154a93b$var$KEY_INDEX","hasIndex","otherChildrenNode","equals","thisIter","otherIter","thisCurrent","otherCurrent","$a9d69158b154a93b$var$IndexMap","Default","$a9d69158b154a93b$var$MAX_NODE","ChildrenNode1","MaxNode","$a9d69158b154a93b$var$ChildrenNode","defineProperties","__EMPTY_NODE","$a9d69158b154a93b$var$nodeFromJSON","json","jsonLeaf","childData","children","childrenHavePriority","hinzeJsonObj","$a9d69158b154a93b$var$each","child3","childSet","sortedChildSet","PathIndex","indexPath_","snap","indexValue","name6","valueNode","$a9d69158b154a93b$var$pathSlice","$a9d69158b154a93b$var$ValueIndex","ValueIndex","compareTo","name7","$a9d69158b154a93b$var$VALUE_INDEX","$a9d69158b154a93b$var$changeValue","snapshotNode","$a9d69158b154a93b$var$changeChildAdded","$a9d69158b154a93b$var$changeChildRemoved","$a9d69158b154a93b$var$changeChildChanged","oldSnap","index_","IndexedFilter","newChild","affectedPath","optChangeAccumulator","oldChild","hasChild","trackChildChange","withIndex","newSnap","indexedFilter_","$a9d69158b154a93b$var$IndexedFilter","RangedFilter","getStartPost_","endPost_","getEndPost_","startPost_","isWithinStart","startIsInclusive_","getStartPost","isWithinEnd","endIsInclusive_","getEndPost","matches","filtered","updateFullNode","makePost","getIndexStartValue","startName","minPost","hasEnd","LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","$a9d69158b154a93b$var$RangedFilter","limit_","getLimit","isViewFromLeft","startAfterSet_","endBeforeSet_","numChildren","getIndexedFilter","fullLimitUpdateChild_","isIndexed","hasNext","iterator1","getReverseIterator","next1","count1","childKey","childSnap","changeAccumulator","newChildNamedNode","windowBoundary","oldEventCache","getFirstChild","getLastChild","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","startSet_","viewFrom_","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","limitSet_","loadsAllData","copy1","queryParams","orderBy","$a9d69158b154a93b$var$PathIndex","qs","startParam","endParam","$a9d69158b154a93b$var$queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","query9","listenId","getListenId_","thisListen","queryStringParameters","$a9d69158b154a93b$var$queryParamsToRestQueryStringParameters","restRequest_","query10","query11","deferred","_param","_this7","querystring","xhr","XMLHttpRequest","responseText","query12","isDefault","$a9d69158b154a93b$var$ServerActions","$a9d69158b154a93b$var$SnapshotHolder","SnapshotHolder","rootNode_","$a9d69158b154a93b$var$newSparseSnapshotTree","$a9d69158b154a93b$var$pathIsEmpty","sparseSnapshotTree","prefixPath","tree","$a9d69158b154a93b$var$OperationType","OperationType1","StatsListener","collection_","last_","newStats","stat","StatsReporter","server_","statsToReport_","statsListener_","$a9d69158b154a93b$var$StatsListener","reportStats_","reportedStats","haveStatsToReport","$a9d69158b154a93b$var$emptyChildrenSingleton","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","childTree","subtree","$a9d69158b154a93b$var$newEmptyPath","ListenComplete","OVERWRITE","Overwrite","Merge","MERGE","$a9d69158b154a93b$var$CacheNode","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isCompleteForChild","EventGenerator","query_","eventGenerator","changes","registrations","eventCache","filter","change","aWrapped","bWrapped","$a9d69158b154a93b$var$eventGeneratorCompareChanges","filteredChanges","materializedChange","prevName","getPredecessorChildName","$a9d69158b154a93b$var$eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","$a9d69158b154a93b$var$newViewCache","serverCache","$a9d69158b154a93b$var$viewCacheUpdateEventSnap","viewCache","eventSnap","complete","$a9d69158b154a93b$var$viewCacheUpdateServerSnap","serverSnap","$a9d69158b154a93b$var$viewCacheGetCompleteEventSnap","getNode","$a9d69158b154a93b$var$viewCacheGetCompleteServerSnap","$a9d69158b154a93b$var$EmptyChildren","$a9d69158b154a93b$var$ImmutableTree","ImmutableTree","relativePath","child5","childExistingPathAndValue","findRootMostMatchingPathAndValue","$a9d69158b154a93b$var$pathChild","toSet","child7","child8","newTree","fold_","pathSoFar","accum","pathToFollow","currentRelativePath","foreachOnPath_","foreach_","childPath","$a9d69158b154a93b$var$CompoundWrite","CompoundWrite","writeTree_","$a9d69158b154a93b$var$compoundWriteAddWrite","compoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","newWriteTree1","setTree","$a9d69158b154a93b$var$compoundWriteAddWrites","updates","newWrite","$a9d69158b154a93b$var$compoundWriteRemoveWrite","empty","newWriteTree2","$a9d69158b154a93b$var$compoundWriteHasCompleteWrite","$a9d69158b154a93b$var$compoundWriteGetCompleteNode","$a9d69158b154a93b$var$compoundWriteGetCompleteChildren","$a9d69158b154a93b$var$compoundWriteChildCompoundWrite","shadowingNode","errorPrefixFxn","$a9d69158b154a93b$var$compoundWriteApply","writeTree","priorityWrite","$a9d69158b154a93b$var$applySubtreeWrite","$a9d69158b154a93b$var$writeTreeChildWrites","$a9d69158b154a93b$var$newWriteTreeRef","errorPrefix","allWrites","record","writeId","$a9d69158b154a93b$var$writeTreeRemoveWrite","findIndex","removedWriteWasVisible","writeToRemove","removedWriteOverlapsWithOtherWrites","currentWrite","$a9d69158b154a93b$var$writeTreeRecordContainsPath_","$a9d69158b154a93b$var$pathContains","visibleWrites","$a9d69158b154a93b$var$writeTreeLayerTree_","$a9d69158b154a93b$var$writeTreeDefaultFilter_","lastWriteId","$a9d69158b154a93b$var$writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","child10","deepNode","$a9d69158b154a93b$var$writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","$a9d69158b154a93b$var$compoundWriteIsEmpty","$a9d69158b154a93b$var$writeTreeRefCalcCompleteEventCache","writeTreeRef","$a9d69158b154a93b$var$writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","$a9d69158b154a93b$var$writeTreeCalcCompleteEventChildren","$a9d69158b154a93b$var$writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","$a9d69158b154a93b$var$writeTreeRefShadowingWrite","$a9d69158b154a93b$var$writeTreeShadowingWrite","$a9d69158b154a93b$var$writeTreeRefCalcIndexedSlice","completeServerData","reverse","toIterate","nodes","$a9d69158b154a93b$var$writeTreeCalcIndexedSlice","$a9d69158b154a93b$var$writeTreeRefCalcCompleteChild","existingServerCache","$a9d69158b154a93b$var$writeTreeCalcCompleteChild","$a9d69158b154a93b$var$writeTreeRefChild","$a9d69158b154a93b$var$ChildChangeAccumulator","ChildChangeAccumulator","changeMap","oldChange","oldType","from","$a9d69158b154a93b$var$NO_COMPLETE_CHILD_SOURCE","NoCompleteChildSource_","child","$a9d69158b154a93b$var$WriteTreeCompleteChildSource","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","child11","$a9d69158b154a93b$var$viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","newViewCache1","filterServerNode","accumulator","overwrite","fromUser","$a9d69158b154a93b$var$viewProcessorApplyUserOverwrite","fromServer","tagged","isFiltered","$a9d69158b154a93b$var$viewProcessorApplyServerOverwrite","$a9d69158b154a93b$var$viewProcessorCacheHasChild","curViewCache","foreach","$a9d69158b154a93b$var$viewProcessorApplyUserMerge","$a9d69158b154a93b$var$viewProcessorApplyServerMerge","ackUserWrite","serverChildren","$a9d69158b154a93b$var$viewProcessorRevertUserWrite","ackPath","changedChildren","name8","serverCachePath","mergePath","isCompleteForPath","changedChildren1","$a9d69158b154a93b$var$viewProcessorAckUserWrite","LISTEN_COMPLETE","oldServerNode","$a9d69158b154a93b$var$viewProcessorGenerateEventCacheAfterServerEvent","newViewCache5","$a9d69158b154a93b$var$viewProcessorListenComplete","getChanges","newViewCache2","isLeafOrEmpty","oldCompleteSnap","changePath","completeEventChildren","completeNode","oldEventNode","oldEventSnap","updatedPriority","newEventChild","childChangePath","eventChildUpdate","filtersNodes","changedSnap","newServerCache","serverFilter","oldServerSnap","newServerNode","newViewCache3","newViewCache4","getCompleteChild","$a9d69158b154a93b$var$pathGetBack","$a9d69158b154a93b$var$pathParent","$a9d69158b154a93b$var$viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","$a9d69158b154a93b$var$View","initialViewCache","hasLimit","$a9d69158b154a93b$var$LimitedFilter","initialServerCache","initialEventCache","indexFilter","eventGenerator_","$a9d69158b154a93b$var$EventGenerator","view","$a9d69158b154a93b$var$viewIsEmpty","eventRegistrations_","$a9d69158b154a93b$var$viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","remaining","existing","hasAnyCallback","processor_","moves","eventRegistrations","syncPoint","optCompleteServerCache","views","$a9d69158b154a93b$var$viewApplyOperation","view1","$a9d69158b154a93b$var$syncPointGetView","query13","serverCacheComplete","eventCacheComplete","query14","initialChanges","query15","$a9d69158b154a93b$var$syncPointHasCompleteView","entries","_value","viewQueryId","query","removed","view2","$a9d69158b154a93b$var$referenceConstructor$1","_repo","$a9d69158b154a93b$var$syncPointGetCompleteServerCache","$a9d69158b154a93b$var$viewGetCompleteServerCache","query16","$a9d69158b154a93b$var$syncPointGetCompleteView","$a9d69158b154a93b$var$syncPointViewExistsForQuery","query17","$a9d69158b154a93b$var$syncPointViewForQuery","SyncTree","listenProvider_","pendingWriteTree_","$a9d69158b154a93b$var$syncTreeApplyUserOverwrite","syncTree","newData","$a9d69158b154a93b$var$syncTreeApplyOperationToSyncPoints_","$a9d69158b154a93b$var$Overwrite","$a9d69158b154a93b$var$syncTreeAckUserWrite","$a9d69158b154a93b$var$writeTreeGetWrite","$a9d69158b154a93b$var$AckUserWrite","$a9d69158b154a93b$var$syncTreeApplyServerOverwrite","$a9d69158b154a93b$var$syncTreeRemoveEventRegistration","query18","skipListenerDedup","maybeSyncPoint","syncPointTree_","removedAndEvents","$a9d69158b154a93b$var$syncPointRemoveEventRegistration","$a9d69158b154a93b$var$syncPointIsEmpty","removingDefault","query19","covered","findOnPath","parentSyncPoint","newViews","$a9d69158b154a93b$var$syncTreeCollectDistinctViewsForSubTree_","$a9d69158b154a93b$var$syncTreeCreateListenerForView_","defaultTag","stopListening","$a9d69158b154a93b$var$syncTreeQueryForListening_","queryToRemove","$a9d69158b154a93b$var$syncTreeApplyTaggedQueryOverwrite","$a9d69158b154a93b$var$syncTreeQueryKeyForTag_","queryKey","$a9d69158b154a93b$var$syncTreeApplyTaggedOperation_","queryPath","query20","foreachOnPath","pathToSyncPoint","sp","foundAncestorDefaultView","$a9d69158b154a93b$var$SyncPoint","foreachChild","childSyncPoint","$a9d69158b154a93b$var$syncTreeMakeQueryKey_","queryToTagMap","tagToQueryMap","$a9d69158b154a93b$var$syncPointAddEventRegistration","skipSetupListener","$a9d69158b154a93b$var$syncTreeCalcCompleteEventCache","serverCache1","$a9d69158b154a93b$var$syncTreeGetServerValue","query21","serverCacheNode","$a9d69158b154a93b$var$viewGetCompleteNode","childWritesCache","$a9d69158b154a93b$var$syncTreeApplyOperationHelper_","childOperation","childServerCache","$a9d69158b154a93b$var$syncPointApplyOperation","syncPointTree","operationForChild","$a9d69158b154a93b$var$syncTreeTagForQuery","query22","$a9d69158b154a93b$var$syncTreeParseQueryKey_","$a9d69158b154a93b$var$ListenComplete","$a9d69158b154a93b$var$newOperationSourceServerTaggedQuery","$a9d69158b154a93b$var$syncTreeApplyTaggedListenComplete","$a9d69158b154a93b$var$syncTreeApplyListenComplete","query1","$a9d69158b154a93b$var$errorForServerCode","query23","query24","splitIndex","maybeChildSyncPoint","$a9d69158b154a93b$var$referenceConstructor","query25","$a9d69158b154a93b$var$syncTreeRemoveTags_","removedQueryKey","removedQuery","removedQueryTag","$a9d69158b154a93b$var$syncTreeGetNextQueryTag_","query26","view3","startListening","childMap","childQueries","queriesToStop","queryToStop","ExistingValueProvider","syncTree_","DeferredValueProvider","path_","existingVal","serverValues","$a9d69158b154a93b$var$resolveComplexDeferredValue","$a9d69158b154a93b$var$resolveScalarDeferredValue","op","existingNode","$a9d69158b154a93b$var$DeferredValueProvider","$a9d69158b154a93b$var$resolveDeferredLeafValue","rawPri","leafNode","childrenNode","$a9d69158b154a93b$var$resolveDeferredValue","name9","childCount","Tree","$a9d69158b154a93b$var$treeSubTree","pathObj","child13","$a9d69158b154a93b$var$Tree","$a9d69158b154a93b$var$treeGetValue","$a9d69158b154a93b$var$treeSetValue","$a9d69158b154a93b$var$treeUpdateParents","$a9d69158b154a93b$var$treeHasChildren","includeSelf","childrenFirst","child15","$a9d69158b154a93b$var$treeGetPath","child16","childEmpty","$a9d69158b154a93b$var$treeIsEmpty","childExists","$a9d69158b154a93b$var$INVALID_KEY_REGEX_","$a9d69158b154a93b$var$INVALID_PATH_REGEX_","$a9d69158b154a93b$var$MAX_LEAF_SIZE_","$a9d69158b154a93b$var$isValidKey","$a9d69158b154a93b$var$isValidPathString","$a9d69158b154a93b$var$ValidationPath","errorPrefix1","hasDotValue","hasActualChild","child1","$a9d69158b154a93b$var$validationPathPop","$a9d69158b154a93b$export$8637b026ace8abb1","fnName","argumentName","search","creatorFunction","changeTree","fromObject","$a9d69158b154a93b$var$Merge","ref","lsState","$c5a299ad66551745$var$app","$fkNhc","initializeApp","$h2IYA","firebaseConfig","$a9d69158b154a93b$export$d0dd861204d0bf72","$c5a299ad66551745$export$3f90b926bc531097","userId","$c5a299ad66551745$var$_getUserData","database1","errorCode","$a9d69158b154a93b$export$3988ae62b71be9a3","$a9d69158b154a93b$export$eff4d24c3ff7876e","$a9d69158b154a93b$export$ad30f661f41f4d90","snapshot","resp","$b8f9b7833fa37166$var$_get","$b8f9b7833fa37166$var$stateModify","totalResults","total_results","$b8f9b7833fa37166$var$_getUserDataBase","$dBKLp","removeGlobalLoader","$38PHG","refs","filmCardListEl","createFilmModal","load","$b8f9b7833fa37166$var$getUserDataBase","$b8f9b7833fa37166$var$get","async"],"version":3,"file":"index.f66ac13c.js.map"}